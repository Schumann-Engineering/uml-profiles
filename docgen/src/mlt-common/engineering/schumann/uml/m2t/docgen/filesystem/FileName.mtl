[comment encoding = UTF-8 /]
[module FileName(
	'http://www.eclipse.org/uml2/5.0.0/UML',
	'http://schumann.engineering/csmn/1',
	'http://schumann.engineering/docgen/1'
)]


[import engineering::schumann::uml::m2t::common::services::VariableService /]
[import engineering::schumann::uml::m2t::docgen::filesystem::FileName.csmn /]


[comment]
NOTE:

Acceleo caches results of queries. This is according to MOF Specification.
HOWEVER, this prevents queries and templates to be "dynamic", i.e. the result
is based on a changing variable.

Hence, these methods have a UUID field. The only reason for this: to cache
results based on the element AND another "unique" qualifier for the cache entry.
UUID can be anything, really.

This allows for multiple files being generated by the same engine / run. Otherwise,
each file would need a new engine / run.
[/comment]
[query protected env_withAllParams(
	this 			: NamedElement,
	key				: String,
	default			: String,
	_context		: Context
) : String = 
	replaceAllPlaceholder(
		env(
			key,
			default
		),
		_context
	)
/]
[comment]
	env(
		key,
		default,
		Sequence(String){
			_context.productName,
			_context.productModel,
			_context.softwareVersion,
			DocGen_Document_ID_Prefix(_context),
			DocGen_File_Part_ID(_context),
			_context.documentTitle
		}
	)
[/comment]


[query protected env_withSomeParams(
	this 			: NamedElement,
	key				: String,
	default			: String,
	_context		: Context
) : String = 
	replaceSomePlaceholder(
		env(
			key,
			default
		),
		_context
	)
/]
[comment]
	env(
		key,
		default,
		Sequence(String){
			_context.productName,
			_context.productModel,
			_context.softwareVersion,
			DocGen_Document_ID_Prefix(_context),
			'',
			_context.documentTitle
		}
	)
[/comment]


[query private DIRECTORY_NAME_SNIPPETS(
	this 			: NamedElement,
	_context		: Context
) : String =
	env_withAllParams(
		'DocGen.Input.Directory.Snippets',
		'_snippets',
		_context
	)
/]


[query private DIRECTORY_NAME_SNIPPETS_COMMON(
	this 			: NamedElement,
	_context		: Context
) : String =
	env_withAllParams(
		'DocGen.Input.Directory.Snippets.common',
		'_common',
		_context
	)
/]


[query private DIRECTORY_NAME_IMAGES_INPUT(
	this 			: NamedElement,
	_context		: Context
) : String =
	env_withAllParams(
		'DocGen.Input.Directory.Images',
		'_images',
		_context
	)
/]


[query private DIRECTORY_NAME_IMAGES_OUTPUT(
	this 			: NamedElement,
	_context		: Context
) : String =
	env_withAllParams(
		'DocGen.Output.Directory.Images',
		'_images',
		_context
	)
/]


[query private DIRECTORY_NAME_IMAGES_HTML(
	this 			: NamedElement,
	_context		: Context
) : String =
	env_withAllParams(
		'DocGen.Html.Directory.Images',
		'_images',
		_context
	)
	.replaceAll('\\\\', '/')
/]


[query private DIRECTORY_NAME_ASSETS_HTML(
	this 			: NamedElement,
	_context		: Context
) : String =
	env_withAllParams(
		'DocGen.Html.Directory.Assets',
		'_assets',
		_context
	)
	.replaceAll('\\\\', '/')
/]


[query private DocGen_Directory_Name(
	this 			: NamedElement,
	_context		: Context
) : String =
	env_withAllParams(
		_context.templateUUID + '.Output.Directory',
		DIRECTORY_NAME_DEFAULT(_context),
		_context
	)
/]


[query private DIRECTORY_NAME_DEFAULT(
	this 			: NamedElement,
	_context		: Context
) : String =
	env_withAllParams(
		'DocGen.Output.Directory',
		this.eClass().name + PATH_SEPARATOR() + this.name,
		_context
	)
/]


[query public DocGen_Directory_URI(
	this 			: NamedElement,
	_context		: Context
) : Sequence(String) =
	Sequence(String)
	{
		DocGen_Directory_Name(_context)
		+ PATH_SEPARATOR(),

		PATH_SEPARATOR()
		+ _context.product.productName
		+ PATH_SEPARATOR()
		+ DocGen_File_Part_Name(_context)
		+ PATH_SEPARATOR(),

		PATH_SEPARATOR()
		+ _context.product.productName
		+ PATH_SEPARATOR()
	}
/]


[query public DIRECTORY_URI_SNIPPETS(
	this 			: NamedElement,
	_context		: Context
) : Sequence(String) =
	let pathString : String = env_withAllParams(
		'DocGen.Input.Directory.Snippets.List',
		'',
		_context
	) in
	
	pathString
	.replaceAll('\r', '')
	.replaceAll('\n', '')
	.tokenize(',')
/]

[comment]
	[query public DIRECTORY_URI_SNIPPETS_OLD(
		this 			: NamedElement,
		_context		: Context
	) : Sequence(String) =
		Sequence(String)
		{
			DocGen_Directory_Name(_context)
			+ PATH_SEPARATOR()
			+ DIRECTORY_NAME_SNIPPETS(_context)
		    + PATH_SEPARATOR()
			+ DocGen_File_Part_Name(_context)
			+ PATH_SEPARATOR(),
	
			DocGen_Directory_Name(_context)
			+ PATH_SEPARATOR()
			+ DIRECTORY_NAME_SNIPPETS(_context)
		    + PATH_SEPARATOR(),
	
			DocGen_Directory_Name(_context)
			+ PATH_SEPARATOR()
			+ DIRECTORY_NAME_SNIPPETS(_context)
		    + PATH_SEPARATOR(),
	
			PATH_SEPARATOR()
			+ _context.product.productName
			+ PATH_SEPARATOR()
			+ DIRECTORY_NAME_SNIPPETS(_context)
			+ PATH_SEPARATOR()
			+ DocGen_File_Part_Name(_context)
			+ PATH_SEPARATOR(),
	
			PATH_SEPARATOR()
			+ _context.product.productName
			+ PATH_SEPARATOR()
			+ DIRECTORY_NAME_SNIPPETS(_context)
			+ PATH_SEPARATOR()
			+ DocGen_File_Part_Name_SwSpec(_context)
			+ PATH_SEPARATOR(),
	
			PATH_SEPARATOR()
			+ _context.product.productName
			+ PATH_SEPARATOR()
			+ DIRECTORY_NAME_SNIPPETS(_context)
			+ PATH_SEPARATOR()
			+ DocGen_File_Part_Name_ModelSpec(_context)
			+ PATH_SEPARATOR(),
	
			PATH_SEPARATOR()
			+ _context.product.productName
			+ PATH_SEPARATOR()
			+ DIRECTORY_NAME_SNIPPETS(_context)
			+ PATH_SEPARATOR()
			+ DocGen_File_Part_Title(_context)
			+ PATH_SEPARATOR(),
	
			PATH_SEPARATOR()
			+ _context.product.productName
			+ PATH_SEPARATOR()
			+ DIRECTORY_NAME_SNIPPETS(_context)
			+ PATH_SEPARATOR(),
	
			PATH_SEPARATOR()
			+ _context.product.productName
			+ PATH_SEPARATOR()
			+ DIRECTORY_NAME_SNIPPETS(_context)
			+ PATH_SEPARATOR()
			+ DIRECTORY_NAME_SNIPPETS_COMMON(_context)
			+ PATH_SEPARATOR(),
	
			DIRECTORY_NAME_SNIPPETS(_context)
			+ PATH_SEPARATOR(),
	
			DIRECTORY_NAME_SNIPPETS(_context)
			+ PATH_SEPARATOR()
			+ DIRECTORY_NAME_SNIPPETS_COMMON(_context)
			+ PATH_SEPARATOR()
		}
	/]
[/comment]


[query public DIRECTORY_URI_IMAGES_INPUT(
	this 			: NamedElement,
	_context		: Context
) : String =
	DIRECTORY_NAME_IMAGES_INPUT(_context)
    + PATH_SEPARATOR()
/]


[query public DIRECTORY_URI_IMAGES_OUTPUT(
	this 			: NamedElement,
	_context		: Context
) : String =
	DIRECTORY_NAME_IMAGES_OUTPUT(_context)
    + PATH_SEPARATOR()
/]


[query public DIRECTORY_URI_IMAGES_HTML(
	this 			: NamedElement,
	_context		: Context
) : String =
	DIRECTORY_NAME_IMAGES_HTML(_context)
    + '/'
/]


[query public DIRECTORY_URI_ASSETS_HTML(
	this 			: NamedElement,
	_context		: Context
) : String =
	DIRECTORY_NAME_ASSETS_HTML(_context)
    + '/'
/]


[query private DocGen_File_Part_Extension(
	this 			: NamedElement,
	_context		: Context
) : String =
	env(
		_context.templateUUID + '.Output.Extension', 
		'txt'
	)
/]


[query public DocGen_File_Part_Name(
	this 			: NamedElement,
	_context		: Context
) : String =
	let dummyUUID	: String = _context.templateUUID in
	let dummyModel	: String = _context.product.model in

	env_withAllParams(
		'ANNOTATION.Product.Model.' + _context.product.model + '.Document.FileName.' + _context.templateUUID,
		env_withAllParams(
			_context.templateUUID + '.Output.FileName', 
			this.name,
			_context
		),
		_context
	)
/]


[query public DocGen_File_Part_ID(
	this 			: NamedElement,
	_context		: Context
) : String =
	let dummyUUID	: String = _context.templateUUID in
	let dummyModel	: String = _context.product.model in

	env_withSomeParams(
		'ANNOTATION.Product.Model.' + _context.product.model + '.Document.ID.' + _context.templateUUID,
		env_withSomeParams(
			_context.templateUUID + '.Output.ID', 
			this.name,
			_context
		),
		_context
	)
/]


[query public DocGen_File_Part_Version(
	this 			: NamedElement,
	_context		: Context
) : String =
	let dummyUUID	: String = _context.templateUUID in
	let dummyModel	: String = _context.product.model in

	env_withSomeParams(
		_context.templateUUID + '.Output.Version', 
		'???',
		_context
	)
/]

[query public DocGen_File_Part_Revision(
	this			: NamedElement,
	_context		: Context
) : String =
	env(
		_context.templateUUID + '.Output.Revision',
		env(
			'ANNOTATION.Product.Model.' + _context.product.model + '.Document.Revision',
			'00'
		)
	)
/]


[query private DocGen_File_Part_Title(
	this 			: NamedElement,
	_context		: Context
) : String =
	env(
		_context.templateUUID + '.Output.Title', 
		this.name
	)
/]


[query private FILE_EXTENSION_SEPARATOR(
	this 			: NamedElement
) : String =
	env(
		'SYSTEM_FILE_SEPARATOR', 
		SYSTEM_FILE_EXTENSION_SEPARATOR()
	)
/]


[query private DocGen_Document_ID_Prefix(
	this			: NamedElement,
	_context		: Context
) : String =
	let dummyModel : String = _context.product.model in

	env(
		'ANNOTATION.Product.Model.' + _context.product.model + '.Document.ID.prefix',
		''
	)
/]


[query private DocGen_File_FileName(
	this 			: NamedElement,
	_context		: Context

) : String =
	DocGen_File_Part_Name(_context)
	+ FILE_EXTENSION_SEPARATOR()
	+ DocGen_File_Part_Extension(_context)
/]


[comment
	#FIXME: UNCLEAR, why we need to query the UUID once to get a valid result next time around ¯\_(ツ)_/¯.
	        otherwise null / invalid is returned.
/]
[query public DocGen_File_URI(
	this 			: NamedElement,
	_context		: Context
) : String = 
	let dummyTemplateUUID 	: String = _context.templateUUID in
	let dummyModel			: String = _context.productModel in
	let dummyModel2			: String = _context.product.model in
	let dummyName			: String = _context.productName in
	let dummyName2			: String = _context.product.productName in

	DocGen_Directory_Name(_context)
	+ PATH_SEPARATOR()
	+ DocGen_File_FileName(_context) 
/]


[query public DocGen_Template_ID(
	this 			: NamedElement,
	_context		: Context
) : String =
	let dummyUUID	: String = _context.templateUUID in

	env(
		_context.templateUUID + '.ID',
		_context.templateUUID
	)
/]


[query public PATH_SEPARATOR(
	this 			: NamedElement
) : String =
	env(
		'SYSTEM_PATH_SEPARATOR',
		SYSTEM_PATH_SEPARATOR()
	)
/]


[query public SYSTEM_PATH_SEPARATOR(
	devNull	: OclAny
) : String = 
	'\\'
/]


[query public SYSTEM_FILE_EXTENSION_SEPARATOR(
	devNull	: OclAny
) : String = 
	'.'
/]


[query private replaceAllSafe(
	this			: String,
	pattern			: String,
	replacemenet	: String
) : String =
	if (replacemenet.oclIsInvalid() or replacemenet.oclIsUndefined() or replacemenet = null) then
		this
	else
		this.replaceAll(pattern, replacemenet)
	endif
/]


[query public replaceSomePlaceholder(
	this		: NamedElement,
	content		: String,
	_context	: Context
) : String =
	let partialResult : String =
		content
		.replaceAllSafe('\\[document\\.title\\]',		_context.documentTitle)
		.replaceAllSafe('\\[document\\.revision\\]',	DocGen_File_Part_Revision(_context))
		.replaceAllSafe('\\[document\\.prefix\\]',		DocGen_Document_ID_Prefix(_context))
	
		.replaceAllSafe('\\[software\\.version\\]',		_context.softwareVersion)
	
		.replaceAllSafe('\\[template\\.UUID\\]',		_context.templateUUID)
		.replaceAllSafe('\\[template\\.ID\\]',			DocGen_Template_ID(_context))
		.replaceAllSafe('\\[template\\.version\\]',		_context.templateVersion)
	
		.replaceAllSafe('\\[product\\.ID\\]', 			getProperty('ANNOTATION.Product.Model.' + _context.product.model + '.Document.ID.prefix'))
	in
	if (_context.product <> null) then
		partialResult
		.replaceAllSafe('\\[product\\.name\\]',			_context.product.productName)
		.replaceAllSafe('\\[product\\.udi\\]',			_context.product.udiDi)
		.replaceAllSafe('\\[product\\.udiBase\\]',		_context.product.udiDiBase)
		.replaceAllSafe('\\[product\\.model\\]',		_context.product.model)
	else
		partialResult
	endif
/]


[query public replaceAllPlaceholder(
	this		: NamedElement,
	content		: String,
	_context	: Context
) : String =
	replaceSomePlaceholder(content, _context)
	.replaceAllSafe('\\[document\\.ID\\]',			DocGen_File_Part_ID(_context))
	.replaceAllSafe('\\[document\\.version\\]',		DocGen_File_Part_Version(_context))
/]