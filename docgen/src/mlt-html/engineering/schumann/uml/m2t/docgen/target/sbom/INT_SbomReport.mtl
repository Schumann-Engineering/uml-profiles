[comment encoding = UTF-8 /]
[module INT_SbomReport(
	'http://www.eclipse.org/uml2/5.0.0/UML',
	'http://schumann.engineering/csmn/1',
	'http://schumann.engineering/sbom/1',
	'http://schumann.engineering/docgen/1'
)]


[**
 * ====================
 * DOCUMENT: 	Software Bill of Material (SBOM)
 * REALM:    	International
 * CONTENT:  	converts a SBOM into a human readable and audible format
 * PROFILES: 	./.
 * UUID:		7ccd9aab-f38d-47dc-9997-fa473002a1d5 
 * ====================
 **/]

[comment CSMN profile /]
[comment ... common /]
[import engineering::schumann::uml::m2t::csmn::common::CommonPlatformEnumerationType /]
[import engineering::schumann::uml::m2t::csmn::common::elements::SystemElement /]
[import engineering::schumann::uml::m2t::csmn::common::lifecycle::common /]
[import engineering::schumann::uml::m2t::csmn::common::lifecycle::Dt_SoftwareVersion /]
[import engineering::schumann::uml::m2t::csmn::common::lifecycle::Dt_Model /]
[import engineering::schumann::uml::m2t::csmn::common::lifecycle::Scope /]
[import engineering::schumann::uml::m2t::csmn::common::lifecycle::ScopeConstraint /]

[comment HTML profile /]
[comment ... common /]
[import engineering::schumann::uml::m2t::html::common::terms::Terms /]
[import engineering::schumann::uml::m2t::html::Boxes /]
[import engineering::schumann::uml::m2t::html::Image /]
[import engineering::schumann::uml::m2t::html::Layout /]
[import engineering::schumann::uml::m2t::html::Link /]

[comment SBOM profile /]
[comment ... common /]
[import engineering::schumann::uml::m2t::sbom::common::Sbom /]

[comment UML profile /]
[comment ... common /]
[import engineering::schumann::uml::m2t::common::Metadata /]
[comment ... services /]
[import engineering::schumann::uml::m2t::common::services::VariableService /]

[comment DocGen /]
[comment ... common /]
[comment import engineering::schumann::uml::m2t::docgen::filesystem::FileName /]
[import engineering::schumann::uml::m2t::docgen::filesystem::FileName.sbom /]
[comment ... html /]
[import engineering::schumann::uml::m2t::csmn::html::lifecycle::Scope /]
[import engineering::schumann::uml::m2t::docgen::html::BasicHtmlDocument /]
[import engineering::schumann::uml::m2t::docgen::html::DocumentClassification /]
[import engineering::schumann::uml::m2t::docgen::html::DocumentMetadata /]
[import engineering::schumann::uml::m2t::docgen::html::ProtectedArea /]
[import engineering::schumann::uml::m2t::docgen::html::QualityManagement /]
[import engineering::schumann::uml::m2t::docgen::html::Toc /]
[import engineering::schumann::uml::m2t::docgen::target::security::Ref_Images /]
[import engineering::schumann::uml::m2t::docgen::target::security::Ref_Regulatory /]
[import engineering::schumann::uml::m2t::sbom::html::Sbom /]
[comment ... services /]
[import engineering::schumann::uml::m2t::docgen::services::DocGenService /]


[**
 * IMPORTANT: Generation is *per software system* of a product
 ** /]
[template public generateDocument_INT_SbomReport(
	this : Model
)
{
	templateUUID		: String			= '7ccd9aab-f38d-47dc-9997-fa473002a1d5';
	templateVersion		: String			= '0.2';
	documentTitle		: String			= env(templateUUID + '.Output.Title', 'Software Bill of Material (SBOM) Report');

	productElements		: Set(Package) 		= this.allOwnedElements()
												->filter(Package)
												->select( p : Package | p.csmn_isScoped() );
	softwareElements	: Set(Component) 	= this.csmn_allOperatingSystem();
}]
[setEnv(templateUUID + '.Output.Extension',   	'html') /]

[loadSbomLibrary() /]

[for (productElement : NamedElement | productElements)]
	[comment iterate over products /]
	[for (product : Product | productElement.csmn_scope().csmn_productInScope()->select(model.csmn_shallGenerateProductModel()))]
		[comment find all Components/SystemElements which constraint/match product /]
		[for (os : Component | softwareElements->select(csmn_isMatch(product)))]
			[comment iterate over all software version of the system element /]
			[for (softwareVersion : String | os.csmn_scopeConstraint().softwareConstraint.softwareVersion->select(csmn_shallGenerateSoftwareVersion()))]
				[comment
					BEWARE: this is a SBOM!
					It can only be created for software, not hardware.
					Hence we use the OS instead of the product here
				/]
				[let _context : Context = os.getContext(product, softwareVersion, documentTitle, templateUUID, templateVersion)]
				[let sbomFileName : String = findSbomFileName(
					this.SBOM_File_URI(_context),
					this.DocGen_Directory_URI(_context))]
				[if (sbomFileName <> null)]
					[let sbom : Sbom = loadSbom(sbomFileName)]
[sbom.generateDocument_INT_SbomReport(productElement, os, _context) /]
					[/let]
				[/if]
				[/let]
				[/let]
			[/for]
		[/for]
	[/for]
[/for]
[/template]


[template public generateDocument_INT_SbomReport(
	this			: Sbom,
	productElement	: NamedElement,
	softwareElement	: NamedElement,
	_context		: Context
)]
[file (productElement.DocGen_File_URI(_context), false, 'UTF-8')]
[productElement.HTML_START(_context) /]
	[productElement.CoverPage_Chapter_print(_context) /]

	[let content : String = productElement.generateDocumentContent(this, _context)]
	[HTML_PAGE_ERRORS(_context)/]

	[productElement.QM_PAGE_Signatory(_context) /]

	[invoke(
		'engineering.schumann.uml.m2t.common.services.StringServiceImpl',
		'fixAcceleoOutput(java.lang.String)',
		Sequence { HTML_PAGE_TOC(_context) }) /]

	[invoke(
		'engineering.schumann.uml.m2t.common.services.StringServiceImpl',
		'fixAcceleoOutput(java.lang.String)',
		Sequence { content }) /]
	
	[/let]
[productElement.HTML_END(_context)/]
[/file]
[/template]


[template private generateDocumentContent(
	this			: NamedElement,
	sbom			: Sbom,
	_context		: Context
)
post(trim())]
[Introduction_Chapter_print(_context) /]

[BasicInformation_Chapter_print(_context) /]

[SoftwareComponents_Chapter_print(sbom, _context) /]

[VulnerabilityHandling_Chapter_print(sbom, _context) /]

[Appendix_Licenses_print(sbom, _context) /]
[/template]


[comment
	====================
	COVER PAGE
	====================
/]
[template private CoverPage_Chapter_print(
	this 			: NamedElement,
	_context		: Context
)]
[html_PAGE_start('cover page', 'cover-page')/]
	[DOC_Classification_PUBLIC(_context) /]
	[comment DOC_Footer(_context) /]

	[TOC_Title_start(_context.documentTitle) /]
		[this.printScopeForSoftware(_context) /]
	[TOC_Title_end() /]

	[html_ANSI_CAUTION_start() /]
		<p>
			This document is the human readable representation of the SBOM.
		</p>
		<p>
			The authoritive source is the digital, machine readable SBOM.
		</p>
		<p>
			This document is provided for convenience of reviews and audits only and should not be used to derive information about the product.
		</p>
	[html_ANSI_CAUTION_end() /]

	[html_ANSI_NOTICE_start() /]
		The SBOM is provided in SPDX as well as CycloneDX format.
	[html_ANSI_NOTICE_end() /]
[html_PAGE_end('cover page') /]
[/template]


[comment
	====================
	INTRODUCTION
	====================
/]
[template private Introduction_Chapter_print(
	this 			: NamedElement,
	_context		: Context
)]
[html_PAGE_start('introduction') /]
	[TOC_Chapter_start('Introduction') /]
		[TOC_Section_start('Purpose') /]
			<p>
				This documents describe the software bill of material (SBOM) of the product(s) in scope.
			</p>
	
			[LegalRef_IMDRF_STED_Cybersec() /]
			[LegalRef_China_Cybersec() /]
		[TOC_Section_end() /]
		
		[TOC_Section_start('Target audience') /]
			<p>
				This document is targeted at:
			</p>

			<ul>
				<li>customers owning the product</li>
				<li>regulatory authorities</li>
				<li>notified body</li>
				<li>risk manangers</li>
			</ul>
		[TOC_Section_end() /]
		
		[TOC_Section_start('Scope') /]
			[this.printScopeForSoftware(_context) /]
		[TOC_Section_end() /]
		
		[TOC_Section_start('Abbreviations') /]
			[TERMS_START() /]
				[TERM_SECURITY_CPE() /]
				[TERM_SECURITY_CVE() /]
				[TERM_SOFTWARE_COTS() /]
				[TERM_SOFTWARE_FOSS() /]
				[TERM_SOFTWARE_OSS() /]
				[TERM_SOFTWARE_OTS() /]
				[TERM_SOFTWARE_PURL() /]
				[TERM_HEALTHCARE_HDO() /]
			[TERMS_END() /]
		[TOC_Section_end() /]
	[TOC_Chapter_end() /]
[html_PAGE_end('introduction') /]
[/template]


[comment
	====================
	BASIC INFORMATION
	====================
/]
[template private BasicInformation_Chapter_print(
	this 			: NamedElement,
	_context		: Context
)]
[if (_context.product.platformType = CommonPlatformEnumerationType::Hardware)]
[html_PAGE_start('basic information') /]
	[TOC_Chapter_start('Hardware environment') /]
		<p>
			The software requires specialized hardware. Supported hardware is listed below.
		</p>

		[printScopeForProduct(_context) /]
[TOC_Chapter_end() /]
[html_PAGE_end('basic information') /]
[/if]
[/template]


[comment
	====================
	SOFTWARE COMPONENTS
	====================
/]
[template private SoftwareComponents_Chapter_print(
	this 			: NamedElement,
	sbom 			: Sbom,
	_context		: Context
)]
[html_PAGE_start('software components') /]
	[TOC_Chapter_start('Software Components') /]
		[SoftwareComponent_Overview_Section_print(sbom, _context) /]
[html_PAGE_end('software components') /]

[html_PAGE_start('definitions') /]
		[SoftwareComponent_Definitions_Section_print(sbom, _context) /]
[html_PAGE_end('definitions') /]

[html_PAGE_start('os and firmware') /]
		[TOC_Section_start('Software from ' + VENDOR_NAME()) /]
			[SoftwareComponent_Firmware_SubSection_print(sbom, _context) /]
[html_PAGE_end('os and firmware') /]

[html_PAGE_start('application') /]
			[SoftwareComponent_Application_SubSection_print(sbom, _context) /]
[html_PAGE_end('application') /]

[html_PAGE_start('library') /]
			[SoftwareComponent_Library_SubSection_print(sbom, _context) /]
		[TOC_Section_end() /]
[html_PAGE_end('library') /]

[html_PAGE_start('3rdparty') /]
		[SoftwareComponent_3rdParty_Section_print(sbom, _context) /]
	[TOC_Chapter_end() /]
[html_PAGE_end('3rdparty') /]

[html_PAGE_start('runtime environment') /]
	[TOC_Chapter_start('Runtime Environment') /]
		[RuntimeEnvironment_Container_Section_print(sbom, _context) /]
		[RuntimeEnvironment_Device_Section_print(sbom, _context) /]
		[RuntimeEnvironment_Platform_Section_print(sbom, _context) /]
	[TOC_Chapter_end() /]
[html_PAGE_end('runtime environment') /]
[/template]


[comment
	--------------------
	SOFTWARE COMPONENTS > Overview
	--------------------
/]
[template private SoftwareComponent_Overview_Section_print(
	this 			: NamedElement,
	sbom 			: Sbom,
	_context		: Context
)]
[TOC_Section_start('Overview') /]
	<p>
		The following table shows all components present for each software system. Details for each component will be provided in later sections.
	</p>

	[sbom.printAsTableExclude(Set(ComponentType){ ComponentType::Device }) /]
[TOC_Section_end() /]

[TOC_Section_start('Runtime Environment') /]
	<p>
		The following table shows the runtime environment of the software.
	</p>

	[sbom.printAsTableSelect(Set(ComponentType){ ComponentType::Device, ComponentType::Container, ComponentType::Platform }) /]
[TOC_Section_end() /]
[/template]


[comment
	--------------------
	SOFTWARE COMPONENTS > Definitions
	--------------------
/]
[template private SoftwareComponent_Definitions_Section_print(
	this 			: NamedElement,
	sbom 			: Sbom,
	_context		: Context
)]
[TOC_Section_start('Definitions') /]
	[TOC_SubSection_start('IEC 81001-5-1 Classification')/]
		<p>
			Each component is classified according to IEC 81001-5-1:
		</p>
	
		<ul>
			<li><b><i>MAINTAINED SOFTWARE</i></b></li>
			<li><b><i>SUPPORTED SOFTWARE</i></b></li>
			<li><b><i>REQUIRED SOFTWARE</i></b></li>
		</ul>
	
		[html_IMG_IEC_81001_5_SOFTWARE_ITEM_Classification(_context) /]
	[TOC_SubSection_end() /]

	[TOC_SubSection_start('NIST IR 7695 - CPE Part')/]
		<p>
			"Part" is a termn defined in NIST IR 7695 for CPE:
		</p>

		<blockquote>
			<p>
				The part attribute SHALL have one of these three string values:
			</p>
		
			<ul>
				<li>The value "a", when the WFN is for a class of applications.</li>
				<li>The value "o", when the WFN is for a class of operating systems.</li>
				<li>The value "h", when the WFN is for a class of hardware devices.</li>
			</ul>
	
			<div class="cite-source">
				National Institue of Standards and Technology (NIST) - U.S. Department of Commerce,
				"Common Platform Enumeration: Naming Specification Version 2.3",
				section 5.3.3.1 "Part",
				<a href="https://csrc.nist.gov/pubs/ir/7695/final">NIST IR 7695</a>
			</div>
		</blockquote>
	[TOC_SubSection_end() /]

	[TOC_SubSection_start('NIST IR 7695 - Operating System')/]
		<blockquote>
			<p>
				Operating System: 
				A computer program, implemented in either software or firmware, which acts as an intermediary between users of a computer and the computer hardware. 
				The purpose of an operating system is to provide an environment in which a user can execute applications.
			</p>

			<div class="cite-source">
				National Institue of Standards and Technology (NIST) - U.S. Department of Commerce,
				"Common Platform Enumeration: Naming Specification Version 2.3",
				section 2.1. "Definitions",
				<a href="https://csrc.nist.gov/pubs/ir/7695/final">NIST IR 7695</a>
			</div>
		</blockquote> 

		<p>
			This definition also applies to software running on an embedded device. Such a software is often not a dedicated product in its own rights. In addition, it often comes with an operating system enrichted by custom user interface and functionality.
		</p>

		<p>
			Such an embedded software is donated by NIST IR 7695 as "operating system". The list above distinguish this use-case to "Device Software".
		</p>
	[TOC_SubSection_end() /]

	[TOC_SubSection_start('NIST IR 7695 - Application')/]
		<blockquote>
			<p>
				Application:
				A system for collecting, saving, processing, and presenting data by means of a computer (ISO 19770-2:4.1.1).
				The term application is generally used when referring to a component of software that can be executed. The terms application and software application are often used synonymously. 
			</p>

			<div class="cite-source">
				National Institue of Standards and Technology (NIST) - U.S. Department of Commerce,
				"Common Platform Enumeration: Naming Specification Version 2.3",
				section 2.1. "Definitions",
				<a href="https://csrc.nist.gov/pubs/ir/7695/final">NIST IR 7695</a>
			</div>
		</blockquote> 

		<p>
			This definition also applies to libraries which cannot be executables standalone. Such libraries are used very often from the C(OTS) and (F)OSS realm.
		</p>

		<p>
			Libaries is donated by NIST IR 7695 as "Application". The list above distinguish this use-case to "Library" as well.
		</p>
	[TOC_SubSection_end() /]
[TOC_Section_end() /]
[/template]


[comment
	--------------------
	SOFTWARE COMPONENTS > vendor > Firmware
	--------------------
/]
[template private SoftwareComponent_Firmware_SubSection_print(
	this 			: NamedElement,
	sbom 			: Sbom,
	_context		: Context
)]
[TOC_SubSection_start('Operating System and Firmware') /]
	<p>
		The following lists the firmware included in the software.
	</p>

	[html_NOTE_start() /]
		developed by [VENDOR_NAME() /]
	[html_NOTE_end() /]

	[html_TIP_start()/]
		Firmware is any software run on an embedded system, no matter if it runs on a field programable gate array (FPGA), micro controller (uC), digital signal processor (DSP), or general purpose computational unit (CPU).
	[html_TIP_end()/]

	[sbom.printSelectedComponents(
		Set{ ComponentType::OperatingSystem, ComponentType::Firmware },
		Set{ ComponentType::Device },
		false
	) /]
[TOC_SubSection_end() /]
[/template]


[comment
	--------------------
	SOFTWARE COMPONENTS > vendor > Application
	--------------------
/]
[template private SoftwareComponent_Application_SubSection_print(
	this 			: NamedElement,
	sbom 			: Sbom,
	_context		: Context
)]
[TOC_SubSection_start('Applications') /]
	<p>
		The following lists the applications included in the software.
	</p>

	[html_NOTE_start() /]
		developed by [VENDOR_NAME() /]
	[html_NOTE_end() /]

	[html_TIP_start()/]
		An application is any executable. Libraries used by such an application will be listed in a separate section later.
	[html_TIP_end()/]

	[sbom.printSelectedComponents(
		Set{ ComponentType::Application },
		Set{ ComponentType::Device },
		false
	) /]
[TOC_SubSection_end() /]
[/template]


[comment
	--------------------
	SOFTWARE COMPONENTS > Library
	--------------------
/]
[template private SoftwareComponent_Library_SubSection_print(
	this 			: NamedElement,
	sbom 			: Sbom,
	_context		: Context
)]
[TOC_SubSection_start('Libraries') /]
	<p>
		The following lists the libraries included in the software.
	</p>

	[html_NOTE_start()/]
		Includes only libraries by [VENDOR_NAME() /]. Libraries from 3rd parties are listed in a separate section later.
	[html_NOTE_end()/]

	[sbom.printSelectedComponents(
		Set{ ComponentType::Library },
		Set{ ComponentType::Device },
		false
	) /]
[TOC_SubSection_end() /]
[/template]


[comment
	--------------------
	SOFTWARE COMPONENTS > 3rd Party / C(OTS) / (F)OSS
	--------------------
/]
[template private SoftwareComponent_3rdParty_Section_print(
	this			: NamedElement,
	sbom 			: Sbom,
	_context		: Context
)]
[TOC_Section_start('Software from 3rd Party / C(OTS) / (F)OSS') /]
	<p>
		The following lists components (applications, firmware, libraries etc.).
	</p>

	[html_NOTE_start()/]
		Includes everything developed by a 3rd party, i.e. C(OTS) and (F)OSS, and <b>NOT</b> by [VENDOR_NAME() /].
	[html_NOTE_end()/]

	[sbom.printSelectedComponents(
		null,
		Set{ ComponentType::Device },
		true
	) /]
[TOC_Section_end() /]
[/template]


[comment
	--------------------
	RUNTIME ENVIRONMENT > Container
	--------------------
/]
[template private RuntimeEnvironment_Container_Section_print(
	this			: NamedElement,
	sbom 			: Sbom,
	_context		: Context
)]
[TOC_Section_start('Virtualization') /]
	<p>
		The following lists virtualization environments (e.g. Java JVM, OS Hypervisors) the software relies on to run.
	</p>

	[sbom.printSelectedComponents(
		Set{ ComponentType::Container },
		null,
		null
	) /]
[TOC_Section_end() /]
[/template]


[comment
	--------------------
	RUNTIME ENVIRONMENT > Device
	--------------------
/]
[template private RuntimeEnvironment_Device_Section_print(
	this			: NamedElement,
	sbom 			: Sbom,
	_context		: Context
)]
[TOC_Section_start('Devices') /]
	<p>
		The following lists devices which the software runs on or controls.
	</p>

	[sbom.printSelectedComponents(
		Set{ ComponentType::Device },
		null,
		null
	) /]
[TOC_Section_end() /]
[/template]


[comment
	--------------------
	RUNTIME ENVIRONMENT > Platform
	--------------------
/]
[template private RuntimeEnvironment_Platform_Section_print(
	this			: NamedElement,
	sbom 			: Sbom,
	_context		: Context
)]
[TOC_Section_start('Platform') /]
	<p>
		The following lists platforms the software supports to run on.
	</p>

	[sbom.printSelectedComponents(
		Set{ ComponentType::Platform },
		null,
		null
	) /]
[TOC_Section_end() /]
[/template]


[comment
	====================
	APPENDIX
	====================
/]
[template private VulnerabilityHandling_Chapter_print(
	this 			: NamedElement,
	sbom 			: Sbom,
	_context		: Context
)]
[html_PAGE_start('vulnerability handling') /]
[TOC_Chapter_start('Vulnerability handling') /]
	[TOC_Section_start('Vulnerability reporting') /]
		[html_ANSI_NOTICE_start() /]
			<p>
				Vulnerabilities can be reported by anyone through various channels. 
			</p>
	
			<p>
				For contact and reporting procedure details, please check [VENDOR_NAME() /] website at [html_Link(VENDOR_WEBSITE()) /].
			</p>
		[html_ANSI_NOTICE_end() /]
	[TOC_Section_end() /]

	[TOC_Section_start('Vulnerability disclosure') /]
		[html_ANSI_NOTICE_start() /]
			<p>
				Vulnerabilities aren't disclosed in this document due to their nature of evolving over time.
			</p>
	
			<p>
				For current vulnerability information, please check [VENDOR_NAME() /] website at [html_Link(VENDOR_WEBSITE()) /].
			</p>
		[html_ANSI_NOTICE_end() /]
	
		[html_INFO_start() /]
			[html_Link('Vulnerability Exploitability eXchange (VEX)', 'https://cyclonedx.org/capabilities/vex/') /] as well as [html_Link('Common Security Advisory Framework (CSAF)', 'https://oasis-open.github.io/csaf-documentation/index.html') /] are used for machine readable and automatable monitoring of evolving threats. 
		[html_INFO_end() /]
	[TOC_Section_end() /]
[TOC_Chapter_end() /]
[html_PAGE_end('vulnerability handling') /]
[/template]



[comment
	====================
	APPENDIX
	====================
/]
[template private Appendix_Licenses_print(
	this 			: NamedElement,
	sbom 			: Sbom,
	_context		: Context
)
{
	licenses : OrderedSet(String) = sbom.sbom_allLicenses();
}]
[if (licenses->size() > 0)]
[html_PAGE_start('appendix a') /]
[TOC_Chapter_start('Appendix A - Licenses') /]

[for (licenses)]
[if (i > 1)]
[html_PAGE_end() /]
[html_PAGE_start(self) /]
[/if]
	[TOC_Section_start('license ' + self) /]
	[TOC_anchor(self) /]
	<p>
		<b>COMPONENTS</b> with this license:
	</p>
	<ul>
	[for (sbom.sbom_allComponentsWithicense(self))]
		<li>[TOC_link(name, name._toString()) /]</li>
	[/for]
	</ul>

	[this.protectedArea('Licenses > ' + self, _context) /]
	[this.TOC_Section_end() /]
[/for]
[html_PAGE_end('appendix - a') /]
[/if]
[/template]