[comment encoding = UTF-8 /]
[module ProtectedArea(
	'http://www.eclipse.org/uml2/5.0.0/UML',
	'http://schumann.engineering/docgen/1'
)
extends engineering::schumann::uml::m2t::html::ProtectedArea
]


[import engineering::schumann::uml::m2t::docgen::filesystem::FileName /]


[template public protectedArea(
	devNull 		: NamedElement,
	locator			: String,
	_context		: Context
)][protectedArea( locator,  DIRECTORY_URI_SNIPPETS(_context), _context.templateUUID )
	.replacePlaceholder(_context)/][/template]



[template public protectedAreaOptional(
	devNull 		: NamedElement,
	locator			: String,
	_context		: Context
)][protectedAreaOptional( locator,  DIRECTORY_URI_SNIPPETS(_context), _context.templateUUID )
	.replacePlaceholder(_context)/][/template]


[template public protectedAreaSchema(
	devNull		: NamedElement,
	name		: String,
	_context	: Context
)
post(trim())]
[protectedArea(        name + ' > Content', 																							_context) /]
[protectedAreaOptional(name + ' > Applicable Documents (QMS)', 					'Applicable Documents (QMS)',				'(none)',	_context) /]
[protectedAreaOptional(name + ' > Applicable Documents (product model)', 		'Applicable Documents (product model)',		'(none)',	_context) /]
[protectedAreaOptional(name + ' > Applicable Documents (software version)', 	'Applicable Documents (software version)',	'(none)',	_context) /]
[protectedAreaOptional(name + ' > Applicable Documents (other)', 				'Applicable Documents (other)',				'(none)',	_context) /]
[/template]


[template private protectedAreaOptional(
	devNull		: NamedElement,
	name		: String,
	title		: String,
	default		: String,
	_context	: Context
)
post(trim())]
[let content : String = protectedAreaOptional(name, _context)]
[if (content <> null and content.trim() <> '')]
<p>
	<b>[title/]</b>
</p>

[content /]
[/if]
[/let]
[/template]


[query private replacePlaceholder(
	this 		: String,
	_context	: Context
) : String =
	this
	.replaceAll('\\{product\\.name\\}',		_context.product.productName)
	.replaceAll('\\{product\\.udi\\}',		_context.product.udiDi)
	.replaceAll('\\{product\\.udiBase\\}',	_context.product.udiDiBase)
	.replaceAll('\\{product\\.model\\}',		_context.product.model)
	.replaceAll('\\{product\\.ID\\}', 		getProperty('ANNOTATION.Product.Model.' + _context.product.model + '.Document.ID.prefix'))
	.replaceAll('\\{software\\.version\\}',	_context.softwareVersion)
	.replaceAll('\\{template\\.UUID\\}',		_context.templateUUID)
	.replaceAll('\\{template\\.version\\}',	_context.templateVersion)
/]