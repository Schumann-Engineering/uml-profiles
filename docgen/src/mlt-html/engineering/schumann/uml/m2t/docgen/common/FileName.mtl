[comment encoding = UTF-8 /]
[module FileName(
	'http://www.eclipse.org/uml2/5.0.0/UML',
	'http://schumann.engineering/csmn/1'
)]


[import engineering::schumann::uml::m2t::common::services::EnvironmentService /]
[import engineering::schumann::uml::m2t::docgen::common::FileName.csmn /]


[comment]
NOTE:

Acceleo caches results of queries. This is according to MOF Specification.
HOWEVER, this prevents queries and templates to be "dynamic", i.e. the result
is based on a changing variable.

Hence, these methods have a UUID field. The only reason for this: to cache
results based on the element AND another "unique" qualifier for the cache entry.
UUID can be anything, really.

This allows for multiple files being generated by the same engine / run. Otherwise,
each file would need a new engine / run.
[/comment]

[query private DIRECTORY_NAME_SNIPPETS(
	this 	: NamedElement,
	UUID	: String
) : String =
	env('DIRECTORY_NAME_SNIPPETS', '_snippets', UUID)
/]


[query private DIRECTORY_NAME_IMAGES(
	this 	: NamedElement,
	UUID	: String
) : String =
	env('DIRECTORY_NAME_IMAGES', '_images', UUID)
/]


[query private DIRECTORY_NAME_DOCUMENT(
	this 	: NamedElement,
	UUID	: String
) : String =
	env('DIRECTORY_NAME_DOCUMENT', DIRECTORY_NAME_DOCUMENT_DEFAULT(UUID), UUID)
/]


[query private DIRECTORY_NAME_DOCUMENT_DEFAULT(
	this	: NamedElement,
	UUID	: String
) : String =
	let default : String = this.eClass().name + PATH_SEPARATOR(UUID) + this.name in 
	let scope : Scope = CSMN_SCOPE() in
	if (scope = null) then
		default		
	else
		let product : Product = CSMN_PRODUCT() in
		if (product = null) then
			default
		else
			CSMN_PRODUCT_NAME() + PATH_SEPARATOR(UUID) + 
			'#export' + PATH_SEPARATOR(UUID) + 
			CSMN_PRODUCT_MODEL() + '-' + CSMN_PRODUCT_SOFTWAREVERSION()
		endif
	endif
/]


[query public DIRECTORY_URI_FILES(
	this	: NamedElement,
	UUID	: String
) : Sequence(String) =
	Sequence(String)
	{
		DIRECTORY_NAME_DOCUMENT(UUID)
		+ PATH_SEPARATOR(UUID),

		PATH_SEPARATOR(UUID)
		+ CSMN_PRODUCT_NAME()
		+ PATH_SEPARATOR(UUID)
		+ DOCUMENT_NAME(UUID)
		+ PATH_SEPARATOR(UUID),

		PATH_SEPARATOR(UUID)
		+ CSMN_PRODUCT_NAME()
		+ PATH_SEPARATOR(UUID)
	}
/]

[query public DIRECTORY_URI_SNIPPETS(
	this	: NamedElement,
	UUID	: String
) : Sequence(String) =
	Sequence(String)
	{
		DIRECTORY_NAME_DOCUMENT(UUID)
		+ PATH_SEPARATOR(UUID)
		+ DIRECTORY_NAME_SNIPPETS(UUID)
	    + PATH_SEPARATOR(UUID)
		+ DOCUMENT_NAME(UUID)
		+ PATH_SEPARATOR(UUID),

		DIRECTORY_NAME_DOCUMENT(UUID)
		+ PATH_SEPARATOR(UUID)
		+ DIRECTORY_NAME_SNIPPETS(UUID)
	    + PATH_SEPARATOR(UUID),

		PATH_SEPARATOR(UUID)
		+ CSMN_PRODUCT_NAME()
		+ PATH_SEPARATOR(UUID)
		+ DIRECTORY_NAME_SNIPPETS(UUID)
		+ PATH_SEPARATOR(UUID)
		+ DOCUMENT_NAME(UUID)
		+ PATH_SEPARATOR(UUID),

		PATH_SEPARATOR(UUID)
		+ CSMN_PRODUCT_NAME()
		+ PATH_SEPARATOR(UUID)
		+ DIRECTORY_NAME_SNIPPETS(UUID)
		+ PATH_SEPARATOR(UUID),

		DIRECTORY_NAME_SNIPPETS(UUID)
		+ PATH_SEPARATOR(UUID)
	}
/]


[query public DIRECTORY_URI_IMAGES(
	this 	: NamedElement,
	UUID	: String
) : String =
	DIRECTORY_NAME_IMAGES(UUID)
    + PATH_SEPARATOR(UUID)
/]


[query private DOCUMENT_EXTENSION(
	this 	: NamedElement,
	UUID	: String
) : String =
	env('DOCUMENT_EXTENSION', 'txt', UUID)
/]


[query private DOCUMENT_NAME(
	this 	: NamedElement,
	UUID	: String
) : String =
	env('DOCUMENT_NAME', this.name, UUID)
/]


[query private FILE_EXTENSION_SEPARATOR(
	this 	: NamedElement,
	UUID	: String
) : String =
	env('FILE_EXTENSION_SEPARATOR', SYSTEM_FILE_EXTENSION_SEPARATOR(), UUID)
/]


[query private FILE_NAME_DOCUMENT(
	this 	: NamedElement,
	UUID	: String
) : String =
	DOCUMENT_NAME(UUID) + FILE_EXTENSION_SEPARATOR(UUID) + DOCUMENT_EXTENSION(UUID)
/]


[query public FILE_URI_DOCUMENT(
	this 	: NamedElement,
	UUID	: String
) : String = 
	DIRECTORY_NAME_DOCUMENT(UUID)
	+ PATH_SEPARATOR(UUID)
	+ FILE_NAME_DOCUMENT(UUID) 
/]


[query public PATH_SEPARATOR(
	this 	: NamedElement,
	UUID	: String
) : String =
	env('PATH_SEPARATOR', SYSTEM_PATH_SEPARATOR(), UUID)
/]


[query public SYSTEM_PATH_SEPARATOR(
	devNull	: OclAny
) : String = 
	'\\'
/]


[query public SYSTEM_FILE_EXTENSION_SEPARATOR(
	devNull	: OclAny
) : String = 
	'.'
/]