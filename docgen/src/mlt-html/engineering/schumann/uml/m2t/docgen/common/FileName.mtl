[comment encoding = UTF-8 /]
[module FileName(
	'http://www.eclipse.org/uml2/5.0.0/UML',
	'http://schumann.engineering/csmn/1'
)]


[import engineering::schumann::uml::m2t::common::services::VariableService /]
[import engineering::schumann::uml::m2t::docgen::common::FileName.csmn /]


[comment]
NOTE:

Acceleo caches results of queries. This is according to MOF Specification.
HOWEVER, this prevents queries and templates to be "dynamic", i.e. the result
is based on a changing variable.

Hence, these methods have a UUID field. The only reason for this: to cache
results based on the element AND another "unique" qualifier for the cache entry.
UUID can be anything, really.

This allows for multiple files being generated by the same engine / run. Otherwise,
each file would need a new engine / run.
[/comment]
[query private env2(
	this 			: NamedElement,
	key				: String,
	default			: String,
	product			: Product,
	softwareVersion	: String,
	templateUUID	: String
) : String = 
	if (product <> null) then
		env(
			key,
			default,
			Sequence(String){ product.productName, product.model, softwareVersion }
		)
	else
		env(
			key,
			default,
			Sequence(String){ null, null, softwareVersion }
		)
	endif
/]	


[query private DIRECTORY_NAME_SNIPPETS(
	this 			: NamedElement,
	product			: Product,
	softwareVersion	: String
) : String =
	env2(
		'DocGen.Output.Directory.Snippets',
		'_snippets',
		product, softwareVersion, null
	)
/]


[query private DIRECTORY_NAME_SNIPPETS_COMMON(
	this 			: NamedElement,
	product			: Product,
	softwareVersion	: String
) : String =
	env2(
		'DocGen.Output.Directory.Snippets.common',
		'_common',
		product, softwareVersion, null
	)
/]


[query private DIRECTORY_NAME_IMAGES(
	this 			: NamedElement,
	product			: Product,
	softwareVersion	: String
) : String =
	env2(
		'DocGen.Output.Directory.Images',
		this.name + '-' + product.model + '-' + softwareVersion,
		product, softwareVersion, null
	)
/]


[query private DocGen_Directory_Name(
	this 			: NamedElement,
	product			: Product,
	softwareVersion	: String,
	templateUUID	: String
) : String =
	env2(
		templateUUID + '.Output.Directory',
		DIRECTORY_NAME_DEFAULT(product, softwareVersion),
		product, softwareVersion, templateUUID
	)
/]


[query private DIRECTORY_NAME_DEFAULT(
	this 			: NamedElement,
	product			: Product,
	softwareVersion	: String
) : String =
	env2(
		'DocGen.Output.Directory',
		this.eClass().name + PATH_SEPARATOR() + this.name,
		product, softwareVersion, null
	)
/]


[query public DocGen_Directory_URI(
	this 			: NamedElement,
	product			: Product,
	softwareVersion	: String,
	templateUUID	: String
) : Sequence(String) =
	Sequence(String)
	{
		DocGen_Directory_Name(product, softwareVersion, templateUUID)
		+ PATH_SEPARATOR(),

		PATH_SEPARATOR()
		+ CSMN_PRODUCT_NAME()
		+ PATH_SEPARATOR()
		+ DocGen_File_Part_Name(templateUUID)
		+ PATH_SEPARATOR(),

		PATH_SEPARATOR()
		+ CSMN_PRODUCT_NAME()
		+ PATH_SEPARATOR()
	}
/]

[query public DIRECTORY_URI_SNIPPETS(
	this 			: NamedElement,
	product			: Product,
	softwareVersion	: String,
	templateUUID	: String
) : Sequence(String) =
	Sequence(String)
	{
		DocGen_Directory_Name(product, softwareVersion, templateUUID)
		+ PATH_SEPARATOR()
		+ DIRECTORY_NAME_SNIPPETS(product, softwareVersion)
	    + PATH_SEPARATOR()
		+ DocGen_File_Part_Name(templateUUID)
		+ PATH_SEPARATOR(),

		DocGen_Directory_Name(product, softwareVersion, templateUUID)
		+ PATH_SEPARATOR()
		+ DIRECTORY_NAME_SNIPPETS(product, softwareVersion)
	    + PATH_SEPARATOR(),

		DocGen_Directory_Name(product, softwareVersion, templateUUID)
		+ PATH_SEPARATOR()
		+ DIRECTORY_NAME_SNIPPETS(product, softwareVersion)
	    + PATH_SEPARATOR(),

		PATH_SEPARATOR()
		+ CSMN_PRODUCT_NAME()
		+ PATH_SEPARATOR()
		+ DIRECTORY_NAME_SNIPPETS(product, softwareVersion)
		+ PATH_SEPARATOR()
		+ DocGen_File_Part_Name(templateUUID)
		+ PATH_SEPARATOR(),

		PATH_SEPARATOR()
		+ CSMN_PRODUCT_NAME()
		+ PATH_SEPARATOR()
		+ DIRECTORY_NAME_SNIPPETS(product, softwareVersion)
		+ PATH_SEPARATOR()
		+ DocGen_File_Part_Title(templateUUID)
		+ PATH_SEPARATOR(),

		PATH_SEPARATOR()
		+ CSMN_PRODUCT_NAME()
		+ PATH_SEPARATOR()
		+ DIRECTORY_NAME_SNIPPETS(product, softwareVersion)
		+ PATH_SEPARATOR(),

		PATH_SEPARATOR()
		+ CSMN_PRODUCT_NAME()
		+ PATH_SEPARATOR()
		+ DIRECTORY_NAME_SNIPPETS(product, softwareVersion)
		+ PATH_SEPARATOR()
		+ DIRECTORY_NAME_SNIPPETS_COMMON(product, softwareVersion)
		+ PATH_SEPARATOR(),

		DIRECTORY_NAME_SNIPPETS(product, softwareVersion)
		+ PATH_SEPARATOR(),

		DIRECTORY_NAME_SNIPPETS(product, softwareVersion)
		+ PATH_SEPARATOR()
		+ DIRECTORY_NAME_SNIPPETS_COMMON(product, softwareVersion)
		+ PATH_SEPARATOR()
	}
/]


[query public DIRECTORY_URI_IMAGES(
	this 			: NamedElement,
	product			: Product,
	softwareVersion	: String,
	templateUUID	: String
) : String =
	DIRECTORY_NAME_IMAGES(product, softwareVersion)
    + PATH_SEPARATOR()
/]


[query private DocGen_File_Part_Extension(
	this 			: NamedElement,
	templateUUID	: String
) : String =
	env(
		templateUUID + '.Output.Extension', 
		'txt'
	)
/]


[query private DocGen_File_Part_Name(
	this 			: NamedElement,
	templateUUID	: String
) : String =
	env(
		templateUUID + '.Output.FileName', 
		this.name
	)
/]


[query private DocGen_File_Part_Title(
	this 			: NamedElement,
	templateUUID	: String
) : String =
	env(
		templateUUID + '.Output.Title', 
		this.name
	)
/]


[query private FILE_EXTENSION_SEPARATOR(
	this 			: NamedElement
) : String =
	env(
		'SYSTEM_FILE_SEPARATOR', 
		SYSTEM_FILE_EXTENSION_SEPARATOR()
	)
/]


[query private DocGen_File_FileName(
	this 			: NamedElement,
	product			: Product,
	softwareVersion	: String,
	templateUUID	: String
) : String =
	DocGen_File_Part_Name(templateUUID)
	+ FILE_EXTENSION_SEPARATOR()
	+ DocGen_File_Part_Extension(templateUUID)
/]


[query public DocGen_File_URI(
	this 			: NamedElement,
	product			: Product,
	softwareVersion	: String,
	templateUUID	: String
) : String = 
	DocGen_Directory_Name(product, softwareVersion, templateUUID)
	+ PATH_SEPARATOR()
	+ DocGen_File_FileName(product, softwareVersion, templateUUID) 
/]


[query public PATH_SEPARATOR(
	this 			: NamedElement
) : String =
	env(
		'SYSTEM_PATH_SEPARATOR',
		SYSTEM_PATH_SEPARATOR()
	)
/]


[query public SYSTEM_PATH_SEPARATOR(
	devNull	: OclAny
) : String = 
	'\\'
/]


[query public SYSTEM_FILE_EXTENSION_SEPARATOR(
	devNull	: OclAny
) : String = 
	'.'
/]