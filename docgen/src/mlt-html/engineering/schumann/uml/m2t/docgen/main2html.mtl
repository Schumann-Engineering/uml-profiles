[comment encoding = UTF-8 /]
[module main2html(
	'http://www.eclipse.org/uml2/5.0.0/UML',
	'http://schumann.engineering/sbom/1',
	'http://www.eclipse.org/gmf/runtime/1.0.3/notation'
)]


[import engineering::schumann::uml::m2t::docgen::target::dev::DEV_ModelReport /]
[import engineering::schumann::uml::m2t::docgen::target::security::Doc_CyberSecurityManagementPlan /]
[import engineering::schumann::uml::m2t::docgen::target::security::Doc_CyberSecurityReport /]
[import engineering::schumann::uml::m2t::docgen::target::security::Doc_CyberSecurityReport_CN /]
[import engineering::schumann::uml::m2t::docgen::target::security::Doc_Mds2Cover /]
[import engineering::schumann::uml::m2t::docgen::target::security::Doc_ProductSecurityContext /]
[import engineering::schumann::uml::m2t::docgen::target::sbom::Doc_SbomReport /]
[import engineering::schumann::uml::m2t::docgen::target::sbom::JSON_CycloneDX /]

[import engineering::schumann::uml::m2t::uml::common::Element /]

[**
 * ====================
 * MAIN
 * ====================
*/]
[template public processModel(
	this : Model
)
post(trim())
]
[comment @main/]
[process(this, Set(NamedElement) { }) /]
[/template]


[template private process(
	this	: Model,
	scope	: Set(NamedElement)
)
post(trim())
]
[comment
	====================
	DEV

	MUST BE FIRST!
	it "loads" the profiles. For unknown reasons, profiles and proxies don't resolve
	correctly. This report fixes that by brute-forcing the loading.
	====================
/]
[generateDocument_DEV_ModelTestReport(scope) /]

[generateFile_JSON_CycloneDX_1_5() /]

[comment
	====================
	CSMN
	====================
/]
[generateDocument_INT_ProductSecurityCharacteristics() /]
[generateDocument_INT_CyberSecurityManagementPlan() /]
[generateDocument_INT_CyberSecurityReport() /]
[generateDocument_CN_CyberSecurityResearchReport() /]


[comment
	====================
	MDS2
	====================
/]
[generateDocument_INT_Mds2Cover() /]

[comment
	====================
	SBOM
	====================
/]
[generateDocument_INT_SbomReport() /]
[/template]


[template public processDiagram(
	this : Diagram
)
post(trim())
]
[comment @main/]

[comment
	====================
	determine all elements in a diagram to restrict the scope of which model
	elements to process / be "in scope"
	====================
/]
[file (name + '.diagram.md', false, 'UTF-8')]
# [name /]

## Model
[let model : Model = getModelForDiagram()]
[model.name /]
[/let]

## Scope
[let scope	: Set(NamedElement) = getUmlElementsFromDiagram()]  
[for (scope->sortedBy(eClass().name + '#' + name))]
- <<[eClass().name /]>> [name /]
[/for]
[/let]
[/file]

[comment process(
	model,
	scope
)/]

[/template]


[query private getModelForDiagram(
	this	: Diagram
) : Model =
	let elements : Set(NamedElement) = getUmlElementsFromDiagram() in
	if (elements->notEmpty()) then
		elements->asSequence()->first()._model()
	else
		null
	endif
/]


[query private getUmlElementsFromDiagram(
	this	: Diagram
) : Set(NamedElement) = 
	let content : Sequence(View) = eAllContents()->filter(View) in 

	content
	.element
	->select(not oclIsUndefined())
	->filter(NamedElement)
	->select(
		oclIsKindOf(Component) or
		oclIsKindOf(Port) or
		oclIsKindOf(Dependency)
	)
	->asSet()
/]
