[comment encoding = UTF-8 /]
[module DEV_ModelReport(
	'http://www.eclipse.org/uml2/5.0.0/UML',
	'http://schumann.engineering/csmn/1',
	'http://schumann.engineering/docgen/1',
	'http://www.eclipse.org/emf/2002/Ecore'
)]


[**
 * ====================
 * DOCUMENT: 	Model Report
 * REALM:    	(development)
 * CONTENT:  	iterates model to show debug information
 * PROFILES: 	./.
 * UUID:		5d20db90-3c4d-4f61-998c-76a84a5ab679
 * ====================
 **/]


[import engineering::schumann::uml::m2t::uml::test::Profile /]
[import engineering::schumann::uml::m2t::csmn::test::common /]
[import engineering::schumann::uml::m2t::csmn::test::Scope /]
[import engineering::schumann::uml::m2t::csmn::test::SystemElement /]

[import engineering::schumann::uml::m2t::docgen::filesystem::FileName /]
[import engineering::schumann::uml::m2t::common::services::VariableService /]
[import engineering::schumann::uml::m2t::docgen::services::DocGenService /]


[template public generateDocument_DEV_ModelTestReport(
	this : Model
)
{
	templateUUID	: String	= '5d20db90-3c4d-4f61-998c-76a84a5ab679';
	templateVersion	: String	= '0.1';
	documentTitle	: String	= env(templateUUID + '.Output.Title', 'DEV Model Report');
	_context		: Context	= getContext(this, null, null, documentTitle, templateUUID, templateVersion);
}]
[setEnv(templateUUID + '.Output.Extension',   	'html') /]

[file (DocGen_File_URI(_context), false, 'UTF-8')]
<html>
	<body>
		<h1>Self-test</h1>

[comment
 * ====================
 * UML Profile
 * ====================
 /]
		<h2>UML</h2>

		<h3>Profiles</h3>
		
		[this.test_UML_Profiles() /]
		
		<h3>All Stereotyped elements</h3>
		
		[this.test_UML_Stereotypes() /]
		
		<h3>Stereotype::Icons</h3>
		
		skipped
		[comment test_StereotypeIcons() /]


[comment
 * ====================
 * CSMN Profile
 * ====================
 /]
		<h2>CSMN</h2>

		<h3>Elements</h3>
		
		<h4>All System Elements</h4>
		
		[test_CSMN_SystemElement() /]
		
		<h4>Operating Systems</h4>
		
		[test_CSMN_OperatingSystem() /]
		
		<h3>Scope</h3>
		
		<h4>All Scoped Elements (incl. product)</h4>
		
		[test_CSMN_ScopedElement() /]
		
		<h4>Products and their OS</h4>
		
		[test_CSMN_ProductToOperatingSystemMatch() /]
	</body>
</html>
[/file]
[/template]


[template private test_StereotypeIcons(
	this : Model
)]
[for (profile : Profile | this.profileApplication.appliedProfile)]
- ***PROFILE***: [profile/]
[for (stereotype : Stereotype | profile.ownedElement->filter(Stereotype)->select(s : Stereotype | s.icon->size() > 0 and s.icon->one(format = 'Papyrus')))]
    - ***STEREOTYPE***: [stereotype/]
[for (image : Image | stereotype.icon->select(format = 'Papyrus'))
{
	annotation : EAnnotation = image.getEAnnotation('image_papyrus');
	kind : OclAny = annotation.details->any(key = 'image_kind_key');
	name : OclAny = annotation.details->any(key = 'image_name_key');
}]
      - ***IMAGE***:
          - annotation = [annotation/]
              - details = [image.getEAnnotation('image_papyrus').details/]
              - kind = [kind/]
              - name = [name/]
          - image
              - format = [image.format /]
              - content = [image.content.size() /]
[/for]
[/for]
[/for]
[/template]