[comment encoding = UTF-8 /]
[module Asset(
	'http://www.eclipse.org/uml2/5.0.0/UML',
	'http://schumann.engineering/csmn/1'
)]


[import engineering::schumann::uml::m2t::csmn::common::assets::Asset /]
[import engineering::schumann::uml::m2t::csmn::common::flow::Connection /]
[import engineering::schumann::uml::m2t::csmn::common::lifecycle::ScopeConstraint /]
[import engineering::schumann::uml::m2t::csmn::html::characteristics::common /]
[import engineering::schumann::uml::m2t::csmn::html::lifecycle::ScopeConstraint /]
[import engineering::schumann::uml::m2t::html::Html /]
[import engineering::schumann::uml::m2t::html::Boxes /]
[import engineering::schumann::uml::m2t::html::Layout /]


[query private interfaces2portAssets(
	interfaces 		: Set(Port),
	assetType  		: AssetType
) : OrderedSet(Port) =
	interfaces
	->select(csmn_isAsset() and csmn_asset().assetType = assetType)
	->sortedBy(name)
/]


[query private interfaces2componentAssets(
	interfaces 		: Set(Port),
	assetType  		: AssetType
) : OrderedSet(Component) =
	interfaces
	.owner
	->flatten()
	->filter(Component)
	->select(csmn_isAsset() and csmn_asset().assetType = assetType)
	->asSet()
	->sortedBy(name)
/]


[query private interfaces2umlConnections(
	interfaces 		: Set(Port)
) : OrderedSet(Dependency) =
	interfaces
	.csmn_allConnectionInvolved()
	->flatten()
	->select(csmn_isConnection())
	->asSet()
	->sortedBy(name)
	->asOrderedSet()
/]


[query private interfaces2csmnConnections(
	interfaces 		: Set(Port)
) : Set(Connection) =
	interfaces
	->interfaces2umlConnections()
	->collect(csmn_connection())
	->filter(Connection)
	->asSet()
/]


[query private interfaces2dataTypeAssets(
	interfaces 		: Set(Port),
	assetType  		: AssetType
) : OrderedSet(DataType) =
	let connections		: Set(Connection)	= interfaces
												->interfaces2csmnConnections() in
	let flowToClient	: Set(DataType)   	= connections
												->collect(flowToClient)
												->filter(DataType)
												->asSet() in
	let flowToSupplier	: Set(DataType)   	= connections
												->collect(flowToSupplier)
												->filter(DataType)
												->asSet() in

	Set(DataType) { }
	->union(flowToSupplier)
	->union(flowToClient)
	->asSet()
	->select(csmn_isAsset() and csmn_asset().assetType = assetType)
	->sortedBy(name)
/]


[query private interfaces2dependencyAssets(
	interfaces 		: Set(Port),
	assetType  		: AssetType
) : OrderedSet(Dependency) =
	interfaces
	->interfaces2umlConnections()
	->select(csmn_isAsset() and csmn_asset().assetType = assetType)
	->sortedBy(name)
/]


[template public printAssetsForInterfacesAsList(
	interfaces 		: Set(Port),
	assetType  		: AssetType,
	startNewPage	: Boolean
)
post(trim())
{
	componentAssets		: OrderedSet(Component)		= interfaces->interfaces2componentAssets(assetType);
	dataTypeAssets		: OrderedSet(DataType)		= interfaces->interfaces2dataTypeAssets(assetType);
	dependencyAssets	: OrderedSet(Dependency)	= interfaces->interfaces2dependencyAssets(assetType);
	portAssets			: OrderedSet(Port)			= interfaces->interfaces2portAssets(assetType);
}]
[if (
	componentAssets->notEmpty()
	or
	dataTypeAssets->notEmpty()
	or
	dependencyAssets->notEmpty()
	or
	portAssets->notEmpty() 
)]
<p>
	<b>Overview</b>
</p>
<ul>
[for (componentAssets)]
	<li>[name._simpleTextToXHtml() /]</li>
[/for]
[for (dataTypeAssets)]
	<li>[name._simpleTextToXHtml() /]</li>
[/for]
[for (dependencyAssets)]
	<li>[name._simpleTextToXHtml() /]</li>
[/for]
[for (portAssets)]
	<li>[name._simpleTextToXHtml() /]</li>
[/for]
</ul>
[if (startNewPage)]
[html_PAGE_end('')/]
[html_PAGE_start('')/]
[else]
[html_PAGE_BREAK('') /]
[/if]
[/if]
[/template]


[template private printAssetsForInterfacesAsList(
	assets	 		: OrderedSet(NamedElement),
	startNewPage	: Boolean
)
post(trim())]
[if (assets->notEmpty())]
<p>
	<b>Overview</b>
</p>
<ul>
[for (assets->sortedBy(name))]
	<li>[name._simpleTextToXHtml() /]</li>
[/for]
</ul>
[if (startNewPage)]
[html_PAGE_end('')/]
[html_PAGE_start('')/]
[else]
[html_PAGE_BREAK('') /]
[/if]
[/if]
[/template]


[template public printAssetsForInterfacesAsTable(
	interfaces 		: Set(Port),
	assetType  		: AssetType,
	startNewPage	: Boolean
)
{
	componentAssets		: OrderedSet(Component)		= interfaces->interfaces2componentAssets(assetType);
	dataTypeAssets		: OrderedSet(DataType)		= interfaces->interfaces2dataTypeAssets(assetType);
	dependencyAssets	: OrderedSet(Dependency)	= interfaces->interfaces2dependencyAssets(assetType);
	portAssets			: OrderedSet(Port)			= interfaces->interfaces2portAssets(assetType);
}]
[if (
	componentAssets->oclIsUndefined() or componentAssets->oclIsInvalid()
	or
	dataTypeAssets->oclIsUndefined() or dataTypeAssets->oclIsInvalid()
	or
	dependencyAssets->oclIsUndefined() or dependencyAssets->oclIsInvalid()
	or
	portAssets->oclIsUndefined() or portAssets->oclIsInvalid()
)]
[html_ANSI_DANGER_start() /]
<p>
	Something is wrong with the model. See debug information below.<br/>
	Most common error: name is empty
</p>
[html_ANSI_DANGER_end() /]
[elseif (
	componentAssets->notEmpty()
	or
	dataTypeAssets->notEmpty()
	or
	dependencyAssets->notEmpty()
	or
	portAssets->notEmpty() 
)]
[comment]
	<table class="table-2-columns">
		<thead>
			<tr>
				<th>ASSET</th>
				<th>ASSET Characteristics</th>
			</tr>
		</thead>
	
		<tbody>
	[for (portAssets)]
			[printAssetAsTableRow() /]
	[/for]
	[for (dataTypeAssets)]
			[printAssetAsTableRow() /]
	[/for]
		</tbody>
	</table>
[/comment]
[componentAssets.printAssetAsTable(startNewPage) /]
[dataTypeAssets.printAssetAsTable(startNewPage) /]
[dependencyAssets.printAssetAsTable(startNewPage) /]
[portAssets.printAssetAsTable(startNewPage) /]
[else]
<p>
	(None)
</p>
[/if]
[/template]


[template private printAssetAsTable(
	this			: NamedElement,
	startNewPage	: Boolean
)
post(trim())]
<p>
	<b>Asset "[name._simpleTextToXHtml()/]"</b>
</p>

[printAssetAsTable() /]
[if (startNewPage)]
[html_PAGE_end('')/]
[html_PAGE_start('')/]
[else]
[html_PAGE_BREAK('') /]
[/if]
[/template]


[template private printAssetAsTable(
	asset		: NamedElement
)
post(trim())
{
	assetMeta : Asset = asset.csmn_asset();
}]
<table class="table-2-columns">
	<tbody>
		[comment ASSET /]
		<tr>
			<th>Name</th>
			<td>
				[asset.name._simpleTextToXHtml() /][if (asset.csmn_hasScopeConstraint())]<br/>[asset.printScopeConstraint() /][/if]
			</td>
		</tr>
		[comment origin /]
		<tr>
			<th>Origin in Product Architecture</th>
			<td>[_toOrigin() /]</td>
		</tr>
		<tr>
		[comment ASSET Characteristics /]
			<th>ASSET Characteristics</th>
			<td>[asset.printCharacteristics(true)/]</td> 
		</tr>
	</tbody>
</table>
[/template]


[template private printAssetAsTableRow(
	asset : NamedElement
)
post(trim())
{
	assetMeta : Asset = asset.csmn_asset();
}]
<tr>
[comment ASSET /]
	<td>
		«[_toOrigin() /]»
		<br/>
		[asset.name._simpleTextToXHtml() /][if (asset.csmn_hasScopeConstraint())]<br/>[asset.printScopeConstraint() /][/if]
	</td>
[comment ASSET Characteristics /]
	<td>[asset.printCharacteristics(true)/]</td> 
</tr>
[/template]


[template public printAssetWithIcon(
	this : NamedElement
) 
? (this.csmn_isAsset())
post(trim())
{
	asset : Asset = this.csmn_asset();
}]
[asset.mardown_icon() /]&nbsp;[this.name._simpleTextToXHtml() /]
[/template]


[template public printAssetWithType(
	this : NamedElement
) 
? (this.csmn_isAsset())
post(trim())
{
	asset : Asset = this.csmn_asset();
}]
«[asset.assetType /]»&nbsp;[this.name._simpleTextToXHtml() /]
[/template]


[template public mardown_icon(
	this : Asset
)
post(trim())]
<img src="icon_Asset_[this.assetType.toString().replaceAll(' ', '')._htmlToXHtml() /].png[']]'/]" width="16px" />
[/template]


[query private _toOrigin(
	asset : NamedElement
) : String =
	     if (asset.oclIsTypeOf(Port)) 		then 'Interface of System Element'
	else if (asset.oclIsTypeOf(Component))	then 'System Element'
	else if (asset.oclIsTypeOf(Dependency))	then 'Connection between interfaces'
	else 'Other Asset'
	endif
	endif
	endif
/]