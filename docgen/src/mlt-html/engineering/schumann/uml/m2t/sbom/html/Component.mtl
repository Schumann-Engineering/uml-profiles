[comment encoding = UTF-8 /]
[module Component(
	'http://schumann.engineering/sbom/1'
)]


[import engineering::schumann::uml::m2t::html::Boxes /]
[import engineering::schumann::uml::m2t::html::Layout /]
[import engineering::schumann::uml::m2t::sbom::common::Component /]
[import engineering::schumann::uml::m2t::sbom::html::Property /]
[import engineering::schumann::uml::m2t::sbom::text::ComponentType /]
[import engineering::schumann::uml::m2t::sbom::text::RelationshipType /]
[import engineering::schumann::uml::m2t::docgen::html::Toc /]
[import engineering::schumann::uml::m2t::common::Metadata /]
[import engineering::schumann::uml::m2t::common::services::VariableService /]


[**
 * ============================================
 * ============================================
 * TABLE
 * ============================================
 * ============================================
 */]
[template public printAsTable(
	this 		: Set(Component),
	ignoreList	: Set(ComponentType)
)]
<table class="table-5-columns">
	<thead>
		<tr>
			<th>Component Name</th>
			<th>CPE Part<br/>NIST IR 7695</th>
			<th>Type<br/>CycloneDX v1.5</th>
			<th>Version</th>
			<th>Classification<br/>IEC 81001-1-5</th>
		</tr>
	</thead>

	<tbody>
		[this.printAsTableRowHorizontal(ignoreList) /]
	</tbody>
</table>
[/template]


[template public printAsTable(
	this : Component
)]
<div class="sbom-component">
	[DocGen_breadcrumbs_toHtml() /]

	<p>
		[TOC_anchor(name, '<b>' + name + '</b>') /]
	</p>
	
	<table class="table-2-columns">
		<tbody>
			[printAsTableRowVertical() /]
		</tbody>
	</table>

	<p class="breadcrumbs" style="text-align: right !important">
		[TOC_link('back to Overview', name + '-overview') /]
	</p>
</div>
[/template]


[**
 * ============================================
 * ============================================
 * ROW (horizontal orientation)
 * ============================================
 * ============================================
 */]
[template public printAsTableRowHorizontal(
	this 		: Component,
	ignoreList	: Set(ComponentType)
)
{
	components			: OrderedSet(Component)	= this.ownedComponent->sortedBy(name);

	vendorComponents	: OrderedSet(Component)	= components->select(isSOUP = false and ignoreList->excludes(type))->sortedBy(name);
	otherComponents 	: OrderedSet(Component)	= components->select(isSOUP = true and ignoreList->excludes(type))->sortedBy(name);
}]
<tr>
	<th colspan="5" style="text-align: center;">by [VENDOR_NAME() /]</th>
</tr>
[printAsTableRowHorizontal() /]
[if (vendorComponents->size() > 0)]
[vendorComponents.printAsTableRowHorizontal() /]
[/if]
[if (otherComponents->size() > 0)]
<tr>
	<th colspan="5" style="text-align: center;">by 3rd party: C(OTS) / FOSS</th>
</tr>
[otherComponents.printAsTableRowHorizontal() /]
[/if]
[/template]


[template public printAsTableRowHorizontal(
	this		: Component
)]
<tr>
	<td style="text-align: center">[TOC_link( name, printName()) /][TOC_anchor(name + '-overview') /]</td>
	<td style="text-align: center">[type.sbom_toStringAsCpeFull() /]</td>
	<td style="text-align: center">[type.sbom_toString() /]</td>
	<td style="text-align: center">[printVersion() /]</td>
	<td style="text-align: center">[classificationIec81001_5_1 /]</td>
</tr>
[comment ownedComponent.printAsTableRowHorizontal() /]
[/template]



[**
 * ============================================
 * ROW (vertical orientation)
 * ============================================
 */]
[template public printAsTableRowVertical(
	this		: Component
)]
[comment name /]
<tr>
	<th class="sbom-ntia-minimum">Name</th>
	<td>[printName() /]</td>
</tr>
[comment CPE type /]
<tr>
	<th>CPE part<br/>NIST IR 7695</th>
	<td>[type.sbom_toStringAsCpeFull() /]</td>
</tr>
[comment type /]
<tr>
	<th>Type<br/>CycloneDX v1.5</th>
	<td>[type.sbom_toString() /]</td>
</tr>
[comment IEC 62304 classification /]
[comment]
	<tr>
		<th>Classification<br/>IEC 62304</th>
		<td>[classificationIec62304 /]</td>
	</tr>
[/comment]
<tr>
	<th>Classification<br/>IEC 81001-5-1</th>
	<td>[classificationIec81001_5_1 /]</td>
</tr>
[comment version /]
<tr>
	<th class="sbom-ntia-minimum">Version</th>
	<td>[printVersion() /]</td>
</tr>
[comment supplier /]
<tr>
	<th class="sbom-ntia-minimum">Supplier</th>
	<td>[printSupplier() /]</td>
</tr>
[comment summary /]
<tr>
	<th>Summary</th>
	<td>[summary /]</td>
</tr>
[comment description /]
<tr>
	<th>Description</th>
	<td>[description /]</td>
</tr>
[comment license /]
[if (license <> null and license <> '')]
<tr>
	<th>License</th>
	<td>
		<p>
			[TOC_link( license ) /]
		</p>
		[html_INFO_Start() /]
			This license is the one "forwarded" to customers. There might be more licenses available by the vendor. However, the declared license was selected / is used.
		[html_INFO_End() /]
	</td>
</tr>
[/if]
[comment owned components /]
<tr>
	<th>Sub-Components</th>
	<td>
		[if (ownedComponent->size() = 0)]
		none
		[else]
		<ul>
		[for (ownedComponent->sortedBy(name))]
			<li>[TOC_link(name, _toString()) /]</li>
		[/for]
		</ul>
		[/if]
	</td>
</tr>
[comment relationships /]
<tr>
	<th class="sbom-ntia-minimum">Relationships</th>
	<td>
		[if (sbom_relationship()->size() = 0)]
		none
		[else]
		<ul>
		[for (sbom_relationshipOutgoing())]
			<li><i>«[type.sbom_toString() /]»</i> [TOC_link(target.name, target.name._toString()) /]</li>
		[/for]
		[for (sbom_relationshipIncoming())]
			<li><i>«[type.sbom_invert().sbom_toString() /]»</i> [TOC_link(source.name, source.name._toString()) /]</li>
		[/for]
		</ul>
		[/if]
	</td>
</tr>
[comment author /]
<tr>
	<th class="sbom-ntia-minimum">Author of SBOM data</th>
	<td>[VENDOR_NAME()/] (data from external sources is vetted and enhanced)</td>
</tr>
[comment timestampl /]
<tr>
	<th class="sbom-ntia-minimum">Timestamp of SBOM data</th>
	<td>[env('DOC_date') /], [env('DOC_time') /]</td>
</tr>
[comment references /]
[comment]
			[if (reference->->size() > 0)]
			<tr>
				<th colspan="2">References</th>
			</tr>
			[for (reference)]
			<tr>
				<td colspan="2" style="text-align: center;">[self /]</td>
			</tr>
			[/for]
			[/if]
[/comment]
[comment properties /]
[if (ownedProperty->select(not key.startsWith('('))->size() > 0)]
<tr>
	<th colspan="2">additional properties</th>
</tr>
[ownedProperty->sortedBy(key).printAsTableRowVertical() /]
[/if]
[/template]



[**
 * ============================================
 * ============================================
 * HELPER 
 * ============================================
 * ============================================
 */]
[template public printName(
	this		: Component
)
? (name = null or name.trim().size() = 0)
]
[html_ANSI_WARNING_Start()/]
	name not allowed to be empty.<br/>Reason: NTIA minimum field
[html_ANSI_WARNING_End()/]
[/template]


[template public printName(
	this		: Component
)][name /][/template]


[template public printSupplier(
	this		: Component
)
? (supplier = null or supplier.trim().size() = 0)
]
[html_ANSI_WARNING_Start()/]
	supplier not allowed to be empty.<br/>Reason: NTIA minimum field
[html_ANSI_WARNING_End()/]
[/template]


[template public printSupplier(
	this 		: Component
)]
[supplier /]
[/template]


[template public printVersion(
	this		: Component
)
? (version = null or version.trim().size() = 0)
]
[html_ANSI_WARNING_Start()/]
	version not allowed to be empty.<br/>Reason: NTIA minimum field
[html_ANSI_WARNING_End()/]
[/template]


[template public printVersion(
	this 		: Component
)
? (version.trim() = '*' or version.trim() = '-')
]
[html_ANSI_WARNING_Start()/]
	version not allowed to be generic (* or -).<br/>Reason: NTIA minimum field
[html_ANSI_WARNING_End()/]
[/template]


[template public printVersion(
	this 		: Component
)]
[version /]
[/template]


[query public _toString(
	this 		: Component
) : String =
	'«' + type + '» ' + name + ' (' + version + ')' 
/]