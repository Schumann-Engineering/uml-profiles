[comment encoding = UTF-8 /]
[module ScopeConstraint(
	'http://www.eclipse.org/uml2/5.0.0/UML',
	'http://schumann.engineering/csmn/1'
)]

[import engineering::schumann::uml::m2t::uml::common::Element /]
[import engineering::schumann::uml::m2t::csmn::common::lifecycle::ProductConstraint /]
[import engineering::schumann::uml::m2t::csmn::common::lifecycle::SoftwareConstraint /]
[import engineering::schumann::uml::m2t::common::services::PropertyFileService /]


[query public csmn_allScopeConstraintElements(
	this : Namespace
) : Set(Element) =
	this._allStereotypedElements('CSMN::ScopeConstraint')
/]


[query public csmn_hasScopeConstraint(
	this : NamedElement
) : Boolean =
	this._hasStereotype('CSMN::ScopeConstraint')
/]


[query public csmn_hasValidScopeConstraint(
	this : NamedElement
) : Boolean =
	let scopeConstraint : ScopeConstraint = this.csmn_scopeConstraint() in
	if scopeConstraint <> null then
		scopeConstraint
		.csmn_hasValidScope()
	else
		true
	endif
/]


[query public csmn_hasValidScopeConstraint(
	this 			: NamedElement,
	model			: String,
	softwareVersion	: String
) : Boolean =
	let scopeConstraint : ScopeConstraint = this.csmn_scopeConstraint() in
	if scopeConstraint <> null then
		scopeConstraint
		.csmn_hasValidScope(model, softwareVersion)
	else
		true
	endif
/]


[query public csmn_hasValidScope(
	this : ScopeConstraint
) : Boolean = 
	if (this <> null) then
		if (this.constraintType = ScopeConstraintType::Removed) then
			true
		else
			this
			.productConstraint
			->csmn_hasValidScope()
			and
			this
			.softwareConstraint
			->csmn_hasValidScope()
		endif
	else
		true
	endif
/]


[query public csmn_hasValidScope(
	this 			: ScopeConstraint,
	model			: String,
	softwareVersion	: String
) : Boolean = 
	if (this <> null) then
		if (this.constraintType = ScopeConstraintType::Removed) then
			true
		else
			this
			.productConstraint
			->csmn_hasValidScope(model)
			and
			this
			.softwareConstraint
			->csmn_hasValidScope(softwareVersion)
		endif
	else
		true
	endif
/]


[query public csmn_scopeConstraint(
	this : NamedElement
) : ScopeConstraint =
	this
	._getStereotypeInstance('CSMN::ScopeConstraint')
/]