[comment encoding = UTF-8 /]
[module main(
	'http://www.eclipse.org/uml2/5.0.0/UML',
	'http://schumann.engineering/csmn/1'
)]

[import engineering::schumann::uml::m2t::Element /]
[import engineering::schumann::uml::m2t::services::EnvironmentService /]
[import engineering::schumann::uml::m2t::services::StereotypeService /]
[import engineering::schumann::uml::m2t::test::Profile /]
[import engineering::schumann::uml::m2t::csmn::common::characteristics::InterfaceCharacteristic /]
[import engineering::schumann::uml::m2t::csmn::common::elements::SecurityZone /]
[import engineering::schumann::uml::m2t::csmn::common::elements::SystemElement /]
[import engineering::schumann::uml::m2t::csmn::common::lifecycle::common /]
[import engineering::schumann::uml::m2t::csmn::common::lifecycle::Scope /]
[import engineering::schumann::uml::m2t::csmn::common::lifecycle::ScopeConstraint /]
[import engineering::schumann::uml::m2t::csmn::common::lifecycle::Product /]
[import engineering::schumann::uml::m2t::csmn::markdown::lifecycle::Scope /]
[import engineering::schumann::uml::m2t::csmn::markdown::lifecycle::ScopeConstraint /]
[import engineering::schumann::uml::m2t::csmn::markdown::characteristics::common /]
[import net::daringfireball::markdown::Table /]


[query public getFileName(
	element : NamedElement
) : String =
	element.getFileName('')
/]


[query public getFileName(
	element : NamedElement,
	suffix  : String
) : String =
	element.eClass().name + '/' + element.name + suffix + '.md'
/]



[**
 * ====================
 * MAIN
 * ====================
*/]
[template public mainModel(
	this : Model
)]
	[comment @main/]

	[comment
		====================
		SETUP
		====================

		Configure environment by loading properties file passed as argument to template.

		NOTE: this is done by passing a list of properties files to the execution engine.
	/]
	[comment
		this isn't necessary since Acceleo 3.1. Load properties by passing them as argument
	/]
	[file (this.getFileName(' (test-report)'), false, 'UTF-8')]
# Self-test

## Profiles

[this.testProfiles() /]

## Stereotypes

[this.testStereotypes() /]
	[/file]


	[comment 
		====================
		GO!
		====================
	/]
	[for (pkg : Package | this.allOwnedElements()->filter(Package)->select( p : Package | p.csmn_isScoped() ))]
[pkg.generateMarkdown() /]
	[/for]
[/template]


[**
 * ====================
 * TEMPLATES
 * ====================
*/]
[**
 * Generates markdown files for packages
 */]
[template private generateMarkdown(
	this : Package
)]
	[file (this.getFileName(), false, 'UTF-8')]
[comment
	====================
	INTRODUCTION
	====================
/]
# Introduction

## Purpose
This documents describe the security characteristics of the product(s) in scope. It shall be used as overview and to find documents within the technical documentation more easily.

(info) It covers section 3.05.05.11 "Cybersecurity" of IMDRF/RPS WG/N9 FINAL:2019 "Non-In Vitro Diagnostic Device Market Authorization Table of Contents (nlVD MA ToC)" of the Summary Technical Documentation (STED).

## Scope

[this.printScope(true, false) /]

## Abbreviations
| Abbreviation | Name                                 |
| :----------: | :----------------------------------: |
| CPE          | Common Platform Enumeration          |
| CVE          | Common Vulnerabilities and Exposures |
| HDO          | Health Delivering Organization       |

[comment
	====================
	BASIC INFORMATION
	====================
/]
# Basic information

[comment
	--------------------
	HARDWARE
	--------------------
/]
## Hardware versions

[this.printScope(false, true) /]

[comment
	--------------------
	SOFTWARE
	--------------------
/]
## Software versions

As of writing the following software versions have been released:

**TBD**

[comment
	====================
	PRODUCT ARCHITECTURE
	====================
/]
# Product Architecture

This section describes the boundary of the product and how its interfaces with the environment and different user groups. 

[comment
	--------------------
	DIAGRAM
	--------------------
/]
[for (product : Product | this.csmn_scope().product->csmn_filterInScope())]
## Overview [product.productName/] (model [product.model/])

!['[['/][product.productName/]-Product_Architecture_Diagram_([product.model/]).svg[']]'/]

[/for]

[comment
	--------------------
	PRODUCT INTERFACES
	--------------------
/]
## Product interfaces

### Definition

A PRODUCT INTERFACE
- can be directly used by an operator of the product
- is a technical interface which is being exposed by the top-most level of system components in the system architecture

There are different types of PRODUCT INTERFACE:

1. **NETWORK INTERFACE**
    is an interface to directly connect to a networked infrastructure
    
    *Examples*: Bluetooth, ZigBee, Ethernet, WLAN
2. **NON-NETWORK INTERFACE**
    is an electronic data interchange interface
    
    *Examples*: touch screen, USB port, RS-232 port
3. **STORAGE MEDIA**
    is used for writing or retrieving data from a (mostly) non-volatile data storage.
    
    *Examples*: SD card, USB mass storage device, CF card
4. **MATERIAL INTERFACE**
    provides or receives physical material.
    
    *Examples*: flow of air
5. **ENERGY INTERFACE**
    provides or receives any form of energy like electricity, light or sound.
    
    *Examples*: power plugs, alarm light, speaker

### List of PRODUCT INTERFACE

[let systemElements : OrderedSet(Component) = this.csmn_allSystemElement()->sortedBy(name)]
#### Network interfaces

[let parts : OrderedSet(Component) = systemElements->select(csmn_networkPort()->csmn_filterInScope()->size() > 0)]
[if (parts->size() = 0)]
None
[else]
| System Element | Security Zone | ==PRODUCT INTERFACE== | Purpose | PRODUCT INTERFACE Characteristics |
| :------------: | :-----------: | :-------------------: | :-----: | :-------------------------------- |
[for (component : Component | parts)]
[for (port : Port | component.csmn_networkPort()->csmn_filterInScope()->sortedBy(name))]
[printComponentPortAsTableCell(component, port).toMarkdownTableRow() /]
[/for]
[/for]
[/if]
[/let]

#### Non-Network interfaces

[let parts : OrderedSet(Component) = systemElements->select(csmn_nonNetworkPort()->csmn_filterInScope()->size() > 0)]
[if (parts->size() = 0)]
None
[else]
| System Element | Security Zone | ==PRODUCT INTERFACE== | Purpose | PRODUCT INTERFACE Characteristics |
| :------------: | :-----------: | :-------------------: | :-----: | :-------------------------------- |
[for (component : Component | parts)]
[for (port : Port | component.csmn_nonNetworkPort()->csmn_filterInScope()->sortedBy(name))]
[printComponentPortAsTableCell(component, port).toMarkdownTableRow() /]
[/for]
[/for]
[/if]
[/let]

#### Storage Media

[let parts : OrderedSet(Component) = systemElements->select(csmn_storagePort()->csmn_filterInScope()->size() > 0)]
[if (parts->size() = 0)]
None
[else]
| System Element | Security Zone | ==PRODUCT INTERFACE== | Purpose | PRODUCT INTERFACE Characteristics |
| :------------: | :-----------: | :-------------------: | :-----: | :-------------------------------- |
[for (component : Component | parts)]
[for (port : Port | component.csmn_storagePort()->csmn_filterInScope()->sortedBy(name))]
[printComponentPortAsTableCell(component, port).toMarkdownTableRow() /]
[/for]
[/for]
[/if]
[/let]

#### Material interfaces

[let parts : OrderedSet(Component) = systemElements->select(csmn_materialPort()->csmn_filterInScope()->size() > 0)]
[if (parts->size() = 0)]
None
[else]
| System Element | Security Zone | ==PRODUCT INTERFACE== | Purpose | PRODUCT INTERFACE Characteristics |
| :------------: | :-----------: | :-------------------: | :-----: | :-------------------------------- |
[for (component : Component | parts)]
[for (port : Port | component.csmn_materialPort()->csmn_filterInScope()->sortedBy(name))]
[printComponentPortAsTableCell(component, port).toMarkdownTableRow() /]
[/for]
[/for]
[/if]
[/let]

#### Energy interfaces

[let parts : OrderedSet(Component) = systemElements->select(csmn_energyPort()->csmn_filterInScope()->size() > 0)]
[if (parts->size() = 0)]
None
[else]
| System Element | Security Zone | ==PRODUCT INTERFACE== | Purpose | PRODUCT INTERFACE Characteristics |
| :------------: | :-----------: | :-------------------: | :-----: | :-------------------------------- |
[for (component : Component | parts)]
[for (port : Port | component.csmn_energyPort()->csmn_filterInScope()->sortedBy(name))]
[printComponentPortAsTableCell(component, port).toMarkdownTableRow() /]
[/for]
[/for]
[/if]
[/let]

[let parts : OrderedSet(Component) = systemElements->select(csmn_otherPort()->csmn_filterInScope()->size() > 0)]
[if (parts->size() > 0)]
#### Other interfaces

WARN: this section should be empty! This is an indicator of a wrongly configured model!

| System Element | Security Zone | ==PRODUCT INTERFACE== | Purpose | PRODUCT INTERFACE Characteristics |
| :------------: | :-----------: | :-------------------: | :-----: | :-------------------------------- |
[for (component : Component | parts)]
[for (port : Port | component.csmn_otherPort()->csmn_filterInScope()->sortedBy(name))]
[printComponentPortAsTableCell(component, port).toMarkdownTableRow() /]
[/for]
[/for]
[/if]
[/let]
[/let]

[comment
	--------------------
	CONNECTIONS
	--------------------
/]
## Interface connections

### Definition

An INTERFACE CONNECTION
- is a link from one interface to another
- describes use-case specific characteristics between those interfaces, e.g. which protocol is used

### List of INTERFACE CONNECTION

[comment
	--------------------
	SOFTWARE
	--------------------
/]
## Software

**TBD**
	[/file]
[/template]


[template private printComponentPortAsTableCell(
	component : Component,
	port      : Port
)
post(trim())]
[comment System Element /]
<td>[component.name /][if (component.csmn_hasScopeConstraint())]<br/>[component.printScopeConstraint() /][/if]</td>
[comment Security Zone /]
<td>[if (component.csmn_hasSecurityZone())][component.csmn_securityZoneElement().name/][else]./.[/if]</td>
[comment PRODUCT INTERFACE /]
<td>[port.name/][if (port.csmn_hasScopeConstraint())]<br/>[port.printScopeConstraint().toMarkdownTableCell() /][/if]</td>
[comment Purpose /]
<td>[port.csmn_interfaceCharacteristic().purpose /]</td>
[comment PRODUCT INTERFACE Characteristics /]
<td>[port.printCharacteristics().toMarkdownTableCell()/]</td> 
[/template]