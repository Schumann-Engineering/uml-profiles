[module Sbom(
	'http://schumann.engineering/sbom/1'
)/]


[import engineering::schumann::uml::m2t::sbom::common::System /]
[import engineering::schumann::uml::m2t::sbom::common::Component /]
[import engineering::schumann::uml::m2t::sbom::common::Dt_License /]


[query public sbom_allComponents(
	this : Sbom
) : Set(Component) =
	Set(Component) {}
	->union(ownedComponent)
	->union(ownedComponent.sbom_allComponents())
	->filter(Component)
	->asSet()
/]


[query public findSbomFileName(
	devNull			: OclAny,
	locator			: String,
	includePaths	: Sequence(String)
) : String  =
	invoke(
		'engineering.schumann.uml.m2t.sbom.services.SbomServiceImpl',
		'findSbomFileName(java.lang.String, java.lang.Object)', 
		Sequence{
			locator,
			includePaths
		}
	)
/]


[query public loadSbomLibrary(
	devNull			: OclAny
) : OclVoid =
	invoke(
		'engineering.schumann.uml.m2t.sbom.services.LibraryServiceImpl',
		'LoadSbomLibrary()', 
		Sequence{
		})
/]


[query public sbom_allLicenses(
	this			: Sbom
) : OrderedSet(String) =
	this
	.sbom_allComponents()
	->sbom_allLicenses()
/]


[query public sbom_allComponentsWithicense(
	this			: Sbom,
	needle			: String
) : Set(Component) =
	sbom_allComponents()
	->select(c : Component | needle.equalsIgnoreCase(c.license))
	->asSet() 
/]


[comment]
	[query public loadSbom(
		devNull			: OclAny,
		locator			: String
	) : Sbom  =
		loadSbom(locator, Sequence(String) { } )
	/]
	
	
	[query public loadSbom(
		devNull			: OclAny,
		locator			: String,
		includePaths	: Sequence(String)
	) : Sbom  =
		invoke(
			'engineering.schumann.uml.m2t.sbom.services.SbomServiceImpl',
			'loadSbom(java.lang.String, java.lang.Object)', 
			Sequence{
				locator,
				includePaths
			})
	/]
[/comment]


[query public loadSbom(
	devNull			: OclAny,
	fileName		: String
) : Sbom  =
	invoke(
		'engineering.schumann.uml.m2t.sbom.services.SbomServiceImpl',
		'loadSbom(java.lang.String)', 
		Sequence{
			fileName
		}
	)
/]
