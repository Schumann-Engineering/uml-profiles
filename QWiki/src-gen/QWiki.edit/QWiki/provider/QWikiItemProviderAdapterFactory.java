/**
 */
package QWiki.provider;

import QWiki.util.QWikiAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class QWikiItemProviderAdapterFactory extends QWikiAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public QWikiItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.Author} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuthorItemProvider authorItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.Author}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuthorAdapter() {
		if (authorItemProvider == null) {
			authorItemProvider = new AuthorItemProvider(this);
		}

		return authorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.UmlComment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UmlCommentItemProvider umlCommentItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.UmlComment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUmlCommentAdapter() {
		if (umlCommentItemProvider == null) {
			umlCommentItemProvider = new UmlCommentItemProvider(this);
		}

		return umlCommentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.I18nKeyedString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected I18nKeyedStringItemProvider i18nKeyedStringItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.I18nKeyedString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createI18nKeyedStringAdapter() {
		if (i18nKeyedStringItemProvider == null) {
			i18nKeyedStringItemProvider = new I18nKeyedStringItemProvider(this);
		}

		return i18nKeyedStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.I18nBaseString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected I18nBaseStringItemProvider i18nBaseStringItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.I18nBaseString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createI18nBaseStringAdapter() {
		if (i18nBaseStringItemProvider == null) {
			i18nBaseStringItemProvider = new I18nBaseStringItemProvider(this);
		}

		return i18nBaseStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.I18nValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected I18nValueItemProvider i18nValueItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.I18nValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createI18nValueAdapter() {
		if (i18nValueItemProvider == null) {
			i18nValueItemProvider = new I18nValueItemProvider(this);
		}

		return i18nValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.QWikiModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QWikiModelItemProvider qWikiModelItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.QWikiModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQWikiModelAdapter() {
		if (qWikiModelItemProvider == null) {
			qWikiModelItemProvider = new QWikiModelItemProvider(this);
		}

		return qWikiModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.UmlPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UmlPackageItemProvider umlPackageItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.UmlPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUmlPackageAdapter() {
		if (umlPackageItemProvider == null) {
			umlPackageItemProvider = new UmlPackageItemProvider(this);
		}

		return umlPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.Document} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentItemProvider documentItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.Document}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentAdapter() {
		if (documentItemProvider == null) {
			documentItemProvider = new DocumentItemProvider(this);
		}

		return documentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.I18nString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected I18nStringItemProvider i18nStringItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.I18nString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createI18nStringAdapter() {
		if (i18nStringItemProvider == null) {
			i18nStringItemProvider = new I18nStringItemProvider(this);
		}

		return i18nStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.DocumentVersion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentVersionItemProvider documentVersionItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.DocumentVersion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentVersionAdapter() {
		if (documentVersionItemProvider == null) {
			documentVersionItemProvider = new DocumentVersionItemProvider(this);
		}

		return documentVersionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.Section} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SectionItemProvider sectionItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.Section}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSectionAdapter() {
		if (sectionItemProvider == null) {
			sectionItemProvider = new SectionItemProvider(this);
		}

		return sectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.ProcessReferenceModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessReferenceModelItemProvider processReferenceModelItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.ProcessReferenceModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessReferenceModelAdapter() {
		if (processReferenceModelItemProvider == null) {
			processReferenceModelItemProvider = new ProcessReferenceModelItemProvider(this);
		}

		return processReferenceModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.SuperseedingRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuperseedingRelationshipItemProvider superseedingRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.SuperseedingRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuperseedingRelationshipAdapter() {
		if (superseedingRelationshipItemProvider == null) {
			superseedingRelationshipItemProvider = new SuperseedingRelationshipItemProvider(this);
		}

		return superseedingRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.Term} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermItemProvider termItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.Term}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermAdapter() {
		if (termItemProvider == null) {
			termItemProvider = new TermItemProvider(this);
		}

		return termItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.TermDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermDefinitionItemProvider termDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.TermDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermDefinitionAdapter() {
		if (termDefinitionItemProvider == null) {
			termDefinitionItemProvider = new TermDefinitionItemProvider(this);
		}

		return termDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.BasePractise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasePractiseItemProvider basePractiseItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.BasePractise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasePractiseAdapter() {
		if (basePractiseItemProvider == null) {
			basePractiseItemProvider = new BasePractiseItemProvider(this);
		}

		return basePractiseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.Process} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessItemProvider processItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.Process}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessAdapter() {
		if (processItemProvider == null) {
			processItemProvider = new ProcessItemProvider(this);
		}

		return processItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.ProcessGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessGroupItemProvider processGroupItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.ProcessGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessGroupAdapter() {
		if (processGroupItemProvider == null) {
			processGroupItemProvider = new ProcessGroupItemProvider(this);
		}

		return processGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.Outcome} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutcomeItemProvider outcomeItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.Outcome}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutcomeAdapter() {
		if (outcomeItemProvider == null) {
			outcomeItemProvider = new OutcomeItemProvider(this);
		}

		return outcomeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.WorkProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkProductItemProvider workProductItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.WorkProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkProductAdapter() {
		if (workProductItemProvider == null) {
			workProductItemProvider = new WorkProductItemProvider(this);
		}

		return workProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.GenericWorkProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericWorkProductItemProvider genericWorkProductItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.GenericWorkProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericWorkProductAdapter() {
		if (genericWorkProductItemProvider == null) {
			genericWorkProductItemProvider = new GenericWorkProductItemProvider(this);
		}

		return genericWorkProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.Domain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainItemProvider domainItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.Domain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainAdapter() {
		if (domainItemProvider == null) {
			domainItemProvider = new DomainItemProvider(this);
		}

		return domainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.DO_NOT_USE_RelationshipType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DO_NOT_USE_RelationshipTypeItemProvider dO_NOT_USE_RelationshipTypeItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.DO_NOT_USE_RelationshipType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDO_NOT_USE_RelationshipTypeAdapter() {
		if (dO_NOT_USE_RelationshipTypeItemProvider == null) {
			dO_NOT_USE_RelationshipTypeItemProvider = new DO_NOT_USE_RelationshipTypeItemProvider(this);
		}

		return dO_NOT_USE_RelationshipTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link QWiki.UmlAssociation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UmlAssociationItemProvider umlAssociationItemProvider;

	/**
	 * This creates an adapter for a {@link QWiki.UmlAssociation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUmlAssociationAdapter() {
		if (umlAssociationItemProvider == null) {
			umlAssociationItemProvider = new UmlAssociationItemProvider(this);
		}

		return umlAssociationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (authorItemProvider != null) authorItemProvider.dispose();
		if (umlCommentItemProvider != null) umlCommentItemProvider.dispose();
		if (i18nKeyedStringItemProvider != null) i18nKeyedStringItemProvider.dispose();
		if (i18nBaseStringItemProvider != null) i18nBaseStringItemProvider.dispose();
		if (i18nValueItemProvider != null) i18nValueItemProvider.dispose();
		if (qWikiModelItemProvider != null) qWikiModelItemProvider.dispose();
		if (umlPackageItemProvider != null) umlPackageItemProvider.dispose();
		if (documentItemProvider != null) documentItemProvider.dispose();
		if (i18nStringItemProvider != null) i18nStringItemProvider.dispose();
		if (documentVersionItemProvider != null) documentVersionItemProvider.dispose();
		if (sectionItemProvider != null) sectionItemProvider.dispose();
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (processReferenceModelItemProvider != null) processReferenceModelItemProvider.dispose();
		if (superseedingRelationshipItemProvider != null) superseedingRelationshipItemProvider.dispose();
		if (termItemProvider != null) termItemProvider.dispose();
		if (termDefinitionItemProvider != null) termDefinitionItemProvider.dispose();
		if (basePractiseItemProvider != null) basePractiseItemProvider.dispose();
		if (processItemProvider != null) processItemProvider.dispose();
		if (processGroupItemProvider != null) processGroupItemProvider.dispose();
		if (outcomeItemProvider != null) outcomeItemProvider.dispose();
		if (workProductItemProvider != null) workProductItemProvider.dispose();
		if (genericWorkProductItemProvider != null) genericWorkProductItemProvider.dispose();
		if (domainItemProvider != null) domainItemProvider.dispose();
		if (dO_NOT_USE_RelationshipTypeItemProvider != null) dO_NOT_USE_RelationshipTypeItemProvider.dispose();
		if (umlAssociationItemProvider != null) umlAssociationItemProvider.dispose();
	}

}
