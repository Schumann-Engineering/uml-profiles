<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Ecore="http://www.eclipse.org/uml2/schemas/Ecore/5" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xsi:schemaLocation="http://www.eclipse.org/uml2/schemas/Ecore/5 pathmap://UML_PROFILES/Ecore.profile.uml#_z1OFcHjqEdy8S4Cr8Rc_NA">
  <uml:Model xmi:id="KernelModel" name="Kernel">
    <ownedComment xmi:id="_k0G10O39Ee6g0P-x8MVPJg">
      <body>part of&#xD;
based on&#xD;
maps to&#xD;
source&#xD;
contains&#xD;
[...]</body>
    </ownedComment>
    <packageImport xmi:id="_TrwzoO3jEe6p4qQ9OedHIg">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packagedElement xmi:type="uml:Class" xmi:id="Association" name="Association"/>
    <packagedElement xmi:type="uml:DataType" xmi:id="_kx3aJ-39Ee6g0P-x8MVPJg" name="I18nBaseString" isAbstract="true">
      <ownedAttribute xmi:id="_kx3aKO39Ee6g0P-x8MVPJg" name="value" type="_kx-H0u39Ee6g0P-x8MVPJg" aggregation="composite" association="_kx3aIO39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_kx3aKe39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_kx3aKu39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_kx3aK-39Ee6g0P-x8MVPJg" name="value">
        <ownedParameter xmi:id="_kx3aLO39Ee6g0P-x8MVPJg" name="return" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EString"/>
        </ownedParameter>
        <ownedParameter xmi:id="_kx3aLe39Ee6g0P-x8MVPJg" name="language" effect="read">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EString"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_kx9gwO39Ee6g0P-x8MVPJg" name="I18nDescriptiveElement" isAbstract="true">
      <generalization xmi:id="_kx9gwe39Ee6g0P-x8MVPJg" general="_kx9gye39Ee6g0P-x8MVPJg"/>
      <ownedAttribute xmi:id="_kx9gwu39Ee6g0P-x8MVPJg" name="purpose" type="_kx-H0O39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_kx9gw-39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_kx9gxO39Ee6g0P-x8MVPJg" name="body" type="_kx-H0O39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_kx9gxe39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:DataType" xmi:id="_kx9gxu39Ee6g0P-x8MVPJg" name="I18nKeyedString">
      <generalization xmi:id="_kx9gx-39Ee6g0P-x8MVPJg" general="_kx3aJ-39Ee6g0P-x8MVPJg"/>
      <ownedAttribute xmi:id="_kx9gyO39Ee6g0P-x8MVPJg" name="key">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EString"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_kx9gye39Ee6g0P-x8MVPJg" name="I18nNamedElement" isAbstract="true">
      <generalization xmi:id="_kx9gyu39Ee6g0P-x8MVPJg" general="NamedElement"/>
      <ownedAttribute xmi:id="_kx9gy-39Ee6g0P-x8MVPJg" name="displayName" type="_kx-H0O39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_kx9gzO39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:DataType" xmi:id="_kx-H0O39Ee6g0P-x8MVPJg" name="I18nString">
      <generalization xmi:id="_kx-H0e39Ee6g0P-x8MVPJg" general="_kx3aJ-39Ee6g0P-x8MVPJg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:DataType" xmi:id="_kx-H0u39Ee6g0P-x8MVPJg" name="I18nValue">
      <ownedAttribute xmi:id="_kx-H0-39Ee6g0P-x8MVPJg" name="language">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EString"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_kx-H1O39Ee6g0P-x8MVPJg" name="body">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EString"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_kx3aIO39Ee6g0P-x8MVPJg" memberEnd="_kx-H2e39Ee6g0P-x8MVPJg _kx3aKO39Ee6g0P-x8MVPJg _kxrM4O39Ee6g0P-x8MVPJg _kx3aI-39Ee6g0P-x8MVPJg">
      <eAnnotations xmi:id="_kx3aIe39Ee6g0P-x8MVPJg" source="org.eclipse.papyrus">
        <details xmi:id="_kx3aIu39Ee6g0P-x8MVPJg" key="nature" value="UML_Nature"/>
      </eAnnotations>
      <ownedEnd xmi:id="_kx3aI-39Ee6g0P-x8MVPJg" name="element" type="Element" association="_kx3aIO39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_kx3aJO39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_kx3aJe39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0G11-39Ee6g0P-x8MVPJg" name="DO_NOT_USE_Relationship" isAbstract="true"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0G12O39Ee6g0P-x8MVPJg" name="DO_NOT_USE_RelationshipType">
      <generalization xmi:id="_k0G12e39Ee6g0P-x8MVPJg" general="_kx9gye39Ee6g0P-x8MVPJg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0G12u39Ee6g0P-x8MVPJg" name="SuperseedingRelationship">
      <generalization xmi:id="_k0G12-39Ee6g0P-x8MVPJg" general="DirectedRelationship"/>
      <ownedAttribute xmi:id="_k0G13O39Ee6g0P-x8MVPJg" name="superseedingType" type="_k0G13u39Ee6g0P-x8MVPJg">
        <defaultValue xmi:type="uml:InstanceValue" xmi:id="_k0G13e39Ee6g0P-x8MVPJg" name="defaultValue" type="_k0G13u39Ee6g0P-x8MVPJg" instance="_k0G14O39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_k0G13u39Ee6g0P-x8MVPJg" name="SuperseedingType">
      <ownedLiteral xmi:id="_k0G13-39Ee6g0P-x8MVPJg" name="Added"/>
      <ownedLiteral xmi:id="_k0G14O39Ee6g0P-x8MVPJg" name="Equal"/>
      <ownedLiteral xmi:id="_k0G14e39Ee6g0P-x8MVPJg" name="UpdatedMajor"/>
      <ownedLiteral xmi:id="_k0G14u39Ee6g0P-x8MVPJg" name="UpdatedMinor"/>
      <ownedLiteral xmi:id="_k0G14-39Ee6g0P-x8MVPJg" name="Removed"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0G15-39Ee6g0P-x8MVPJg" name="Abstraction">
      <ownedComment xmi:id="_k0G16O39Ee6g0P-x8MVPJg" annotatedElement="_k0G15-39Ee6g0P-x8MVPJg">
        <body>An Abstraction is a Relationship that relates two Elements or sets of Elements that represent the same concept at different levels of abstraction or from different viewpoints.</body>
      </ownedComment>
      <generalization xmi:id="_k0G16e39Ee6g0P-x8MVPJg" general="Dependency"/>
      <ownedAttribute xmi:id="_k0G16u39Ee6g0P-x8MVPJg" name="mapping" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg" association="_k0WGq-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0G16-39Ee6g0P-x8MVPJg" annotatedElement="_k0G16u39Ee6g0P-x8MVPJg">
          <body>An OpaqueExpression that states the abstraction relationship between the supplier(s) and the client(s). In some cases, such as derivation, it is usually formal and unidirectional; in other cases, such as trace, it is usually informal and bidirectional. The mapping expression is optional and may be omitted if the precise relationship between the Elements is not specified.</body>
        </ownedComment>
        <type xmi:type="uml:Class" href="uml-2.5.1/UML.uml#OpaqueExpression"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0G17O39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Comment" name="Comment">
      <ownedComment xmi:id="_k0G17e39Ee6g0P-x8MVPJg" annotatedElement="Comment">
        <body>A Comment is a textual annotation that can be attached to a set of Elements.</body>
      </ownedComment>
      <generalization xmi:id="_k0G17u39Ee6g0P-x8MVPJg" general="Element"/>
      <ownedAttribute xmi:id="_k0G17-39Ee6g0P-x8MVPJg" name="annotatedElement" type="Element" association="_k0WGp-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0G18O39Ee6g0P-x8MVPJg" annotatedElement="_k0G17-39Ee6g0P-x8MVPJg">
          <body>References the Element(s) being commented.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0G18e39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0G18u39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0G18-39Ee6g0P-x8MVPJg" name="body">
        <ownedComment xmi:id="_k0G19O39Ee6g0P-x8MVPJg" annotatedElement="_k0G18-39Ee6g0P-x8MVPJg">
          <body>Specifies a string that is the comment.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0G19e39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0JSEO39Ee6g0P-x8MVPJg" name="Constraint">
      <ownedComment xmi:id="_k0JSEe39Ee6g0P-x8MVPJg" annotatedElement="_k0JSEO39Ee6g0P-x8MVPJg">
        <body>A Constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an Element or set of Elements.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0JSEu39Ee6g0P-x8MVPJg" name="boolean_value" constrainedElement="_k0JSEO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0JSE-39Ee6g0P-x8MVPJg" annotatedElement="_k0JSEu39Ee6g0P-x8MVPJg">
          <body>The ValueSpecification for a Constraint must evaluate to a Boolean value.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0JSFO39Ee6g0P-x8MVPJg" language=""/>
      </ownedRule>
      <ownedRule xmi:id="_k0JSFe39Ee6g0P-x8MVPJg" name="no_side_effects" constrainedElement="_k0JSEO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0JSFu39Ee6g0P-x8MVPJg" annotatedElement="_k0JSFe39Ee6g0P-x8MVPJg">
          <body>Evaluating the ValueSpecification for a Constraint must not have side effects.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0JSF-39Ee6g0P-x8MVPJg" language=""/>
      </ownedRule>
      <ownedRule xmi:id="_k0JSGO39Ee6g0P-x8MVPJg" name="not_apply_to_self" constrainedElement="_k0JSEO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0JSGe39Ee6g0P-x8MVPJg" annotatedElement="_k0JSGO39Ee6g0P-x8MVPJg">
          <body>A Constraint cannot be applied to itself.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0JSGu39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>not constrainedElement->includes(self)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0JSG-39Ee6g0P-x8MVPJg" general="PackageableElement"/>
      <ownedAttribute xmi:id="_k0JSHO39Ee6g0P-x8MVPJg" name="constrainedElement" type="Element" isOrdered="true" association="_k0WGoO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0JSHe39Ee6g0P-x8MVPJg" annotatedElement="_k0JSHO39Ee6g0P-x8MVPJg">
          <body>The ordered set of Elements referenced by this Constraint.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0JSHu39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0JSH-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0JSIO39Ee6g0P-x8MVPJg" name="context" type="Namespace" subsettedProperty="_k0Kg3-39Ee6g0P-x8MVPJg" association="_k0WGd-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0JSIe39Ee6g0P-x8MVPJg" annotatedElement="_k0JSIO39Ee6g0P-x8MVPJg">
          <body>Specifies the Namespace that owns the Constraint.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0JSIu39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0JSI-39Ee6g0P-x8MVPJg" name="specification" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg" association="_k0WGpO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0JSJO39Ee6g0P-x8MVPJg" annotatedElement="_k0JSI-39Ee6g0P-x8MVPJg">
          <body>A condition that must be true when evaluated in order for the Constraint to be satisfied.</body>
        </ownedComment>
        <type xmi:type="uml:Class" href="uml-2.5.1/UML.uml#ValueSpecification"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Dependency" name="Dependency">
      <ownedComment xmi:id="_k0JSJe39Ee6g0P-x8MVPJg" annotatedElement="Dependency">
        <body>A Dependency is a Relationship that signifies that a single model Element or a set of model Elements requires other model Elements for their specification or implementation. This means that the complete semantics of the client Element(s) are either semantically or structurally dependent on the definition of the supplier Element(s).</body>
      </ownedComment>
      <generalization xmi:id="_k0JSJu39Ee6g0P-x8MVPJg" general="DirectedRelationship"/>
      <generalization xmi:id="_k0KgMO39Ee6g0P-x8MVPJg" general="PackageableElement"/>
      <ownedAttribute xmi:id="_k0KgMe39Ee6g0P-x8MVPJg" name="client" type="NamedElement" subsettedProperty="_k0KgOe39Ee6g0P-x8MVPJg" association="_k0WGhO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0KgMu39Ee6g0P-x8MVPJg" annotatedElement="_k0KgMe39Ee6g0P-x8MVPJg">
          <body>The Element(s) dependent on the supplier Element(s). In some cases (such as a trace Abstraction) the assignment of direction (that is, the designation of the client Element) is at the discretion of the modeler and is a stipulation.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0KgM-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0KgNO39Ee6g0P-x8MVPJg" name="supplier" type="NamedElement" subsettedProperty="_k0KgPO39Ee6g0P-x8MVPJg" association="_k0WGm-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0KgNe39Ee6g0P-x8MVPJg" annotatedElement="_k0KgNO39Ee6g0P-x8MVPJg">
          <body>The Element(s) on which the client Element(s) depend in some respect. The modeler may stipulate a sense of Dependency direction suitable for their domain.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0KgNu39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="DirectedRelationship" name="DirectedRelationship" isAbstract="true">
      <ownedComment xmi:id="_k0KgN-39Ee6g0P-x8MVPJg" annotatedElement="DirectedRelationship">
        <body>A DirectedRelationship represents a relationship between a collection of source model Elements and a collection of target model Elements.</body>
      </ownedComment>
      <generalization xmi:id="_k0KgOO39Ee6g0P-x8MVPJg" general="Relationship"/>
      <ownedAttribute xmi:id="_k0KgOe39Ee6g0P-x8MVPJg" name="source" type="Element" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_k0ROEO39Ee6g0P-x8MVPJg" association="_k0WGk-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0KgOu39Ee6g0P-x8MVPJg" annotatedElement="_k0KgOe39Ee6g0P-x8MVPJg">
          <body>Specifies the source Element(s) of the DirectedRelationship.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0KgO-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0KgPO39Ee6g0P-x8MVPJg" name="target" type="Element" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_k0ROEO39Ee6g0P-x8MVPJg" association="_k0WGl-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0KgPe39Ee6g0P-x8MVPJg" annotatedElement="_k0KgPO39Ee6g0P-x8MVPJg">
          <body>Specifies the target Element(s) of the DirectedRelationship.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0KgPu39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0KgW-39Ee6g0P-x8MVPJg" name="ElementImport">
      <ownedComment xmi:id="_k0KgXO39Ee6g0P-x8MVPJg" annotatedElement="_k0KgW-39Ee6g0P-x8MVPJg">
        <body>An ElementImport identifies a NamedElement in a Namespace other than the one that owns that NamedElement and allows the NamedElement to be referenced using an unqualified name in the Namespace owning the ElementImport.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0KgXe39Ee6g0P-x8MVPJg" name="imported_element_is_public" constrainedElement="_k0KgW-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0KgXu39Ee6g0P-x8MVPJg" annotatedElement="_k0KgXe39Ee6g0P-x8MVPJg">
          <body>An importedElement has either public visibility or no visibility at all.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0KgX-39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>importedElement.visibility &lt;> null implies importedElement.visibility = VisibilityKind::public</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0KgYO39Ee6g0P-x8MVPJg" name="visibility_public_or_private" constrainedElement="_k0KgW-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0KgYe39Ee6g0P-x8MVPJg" annotatedElement="_k0KgYO39Ee6g0P-x8MVPJg">
          <body>The visibility of an ElementImport is either public or private.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0KgYu39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>visibility = VisibilityKind::public or visibility = VisibilityKind::private</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0KgY-39Ee6g0P-x8MVPJg" general="DirectedRelationship"/>
      <ownedAttribute xmi:id="_k0KgZO39Ee6g0P-x8MVPJg" name="alias">
        <ownedComment xmi:id="_k0KgZe39Ee6g0P-x8MVPJg" annotatedElement="_k0KgZO39Ee6g0P-x8MVPJg">
          <body>Specifies the name that should be added to the importing Namespace in lieu of the name of the imported PackagableElement. The alias must not clash with any other member in the importing Namespace. By default, no alias is used.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0KgZu39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0KgZ-39Ee6g0P-x8MVPJg" name="importedElement" type="PackageableElement" subsettedProperty="_k0KgPO39Ee6g0P-x8MVPJg" association="_k0WGi-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0KgaO39Ee6g0P-x8MVPJg" annotatedElement="_k0KgZ-39Ee6g0P-x8MVPJg">
          <body>Specifies the PackageableElement whose name is to be added to a Namespace.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0Kgae39Ee6g0P-x8MVPJg" name="importingNamespace" type="Namespace" subsettedProperty="_k0KgOe39Ee6g0P-x8MVPJg Element-owner" association="_k0WGde39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kgau39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgae39Ee6g0P-x8MVPJg">
          <body>Specifies the Namespace that imports a PackageableElement from another Namespace.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0Kga-39Ee6g0P-x8MVPJg" name="visibility" type="_k0ROg-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0KgbO39Ee6g0P-x8MVPJg" annotatedElement="_k0Kga-39Ee6g0P-x8MVPJg">
          <body>Specifies the visibility of the imported PackageableElement within the importingNamespace, i.e., whether the  importedElement will in turn be visible to other Namespaces. If the ElementImport is public, the importedElement will be visible outside the importingNamespace while, if the ElementImport is private, it will not.</body>
        </ownedComment>
        <defaultValue xmi:type="uml:InstanceValue" xmi:id="_k0Kgbe39Ee6g0P-x8MVPJg" type="_k0ROg-39Ee6g0P-x8MVPJg" instance="_k0ROhe39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_k0Kgbu39Ee6g0P-x8MVPJg" name="getName" bodyCondition="_k0KgcO39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Kgb-39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgbu39Ee6g0P-x8MVPJg">
          <body>The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0KgcO39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Kgbu39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgce39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (if alias->notEmpty() then
  alias
else
  importedElement.name
endif)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Kgcu39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0Kgc-39Ee6g0P-x8MVPJg" name="MultiplicityElement" isAbstract="true">
      <ownedComment xmi:id="_k0KgdO39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgc-39Ee6g0P-x8MVPJg">
        <body>A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A MultiplicityElement embeds this information to specify the allowable cardinalities for an instantiation of the Element.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0Kgde39Ee6g0P-x8MVPJg" name="upper_ge_lower" constrainedElement="_k0Kgc-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kgdu39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgde39Ee6g0P-x8MVPJg">
          <body>The upper bound must be greater than or equal to the lower bound.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgd-39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>upperBound() >= lowerBound()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0KgeO39Ee6g0P-x8MVPJg" name="lower_ge_0" constrainedElement="_k0Kgc-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kgee39Ee6g0P-x8MVPJg" annotatedElement="_k0KgeO39Ee6g0P-x8MVPJg">
          <body>The lower bound must be a non-negative integer literal.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgeu39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>lowerBound() >= 0</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0Kge-39Ee6g0P-x8MVPJg" name="value_specification_no_side_effects" constrainedElement="_k0Kgc-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0KgfO39Ee6g0P-x8MVPJg" annotatedElement="_k0Kge-39Ee6g0P-x8MVPJg">
          <body>If a non-literal ValueSpecification is used for lowerValue or upperValue, then evaluating that specification must not have side effects.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgfe39Ee6g0P-x8MVPJg" language=""/>
      </ownedRule>
      <ownedRule xmi:id="_k0Kgfu39Ee6g0P-x8MVPJg" name="value_specification_constant" constrainedElement="_k0Kgc-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kgf-39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgfu39Ee6g0P-x8MVPJg">
          <body>If a non-literal ValueSpecification is used for lowerValue or upperValue, then that specification must be a constant expression.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0KggO39Ee6g0P-x8MVPJg" language=""/>
      </ownedRule>
      <ownedRule xmi:id="_k0Kgge39Ee6g0P-x8MVPJg" name="lower_is_integer" constrainedElement="_k0Kgc-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kggu39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgge39Ee6g0P-x8MVPJg">
          <body>If it is not empty, then lowerValue must have an Integer value.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgg-39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>lowerValue &lt;> null implies lowerValue.integerValue() &lt;> null</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0KghO39Ee6g0P-x8MVPJg" name="upper_is_unlimitedNatural" constrainedElement="_k0Kgc-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kghe39Ee6g0P-x8MVPJg" annotatedElement="_k0KghO39Ee6g0P-x8MVPJg">
          <body>If it is not empty, then upperValue must have an UnlimitedNatural value.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kghu39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>upperValue &lt;> null implies upperValue.unlimitedValue() &lt;> null</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0Kgh-39Ee6g0P-x8MVPJg" general="Element"/>
      <ownedAttribute xmi:id="_k0KgiO39Ee6g0P-x8MVPJg" name="isOrdered">
        <ownedComment xmi:id="_k0Kgie39Ee6g0P-x8MVPJg" annotatedElement="_k0KgiO39Ee6g0P-x8MVPJg">
          <body>For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this MultiplicityElement are sequentially ordered.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_k0Kgiu39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0Kgi-39Ee6g0P-x8MVPJg" name="isUnique">
        <ownedComment xmi:id="_k0KgjO39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgi-39Ee6g0P-x8MVPJg">
          <body>For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this MultiplicityElement are unique.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_k0Kgje39Ee6g0P-x8MVPJg" value="true"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0Kgju39Ee6g0P-x8MVPJg" name="lower" isDerived="true">
        <ownedComment xmi:id="_k0Kgj-39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgju39Ee6g0P-x8MVPJg">
          <body>The lower bound of the multiplicity interval.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0KgkO39Ee6g0P-x8MVPJg" name="lowerValue" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg" association="_k0WGhe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kgke39Ee6g0P-x8MVPJg" annotatedElement="_k0KgkO39Ee6g0P-x8MVPJg">
          <body>The specification of the lower bound for this multiplicity.</body>
        </ownedComment>
        <type xmi:type="uml:Class" href="uml-2.5.1/UML.uml#ValueSpecification"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Kgku39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0Kgk-39Ee6g0P-x8MVPJg" name="upper" isDerived="true">
        <ownedComment xmi:id="_k0KglO39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgk-39Ee6g0P-x8MVPJg">
          <body>The upper bound of the multiplicity interval.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0Kgle39Ee6g0P-x8MVPJg" name="upperValue" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg" association="_k0WGiO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kglu39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgle39Ee6g0P-x8MVPJg">
          <body>The specification of the upper bound for this multiplicity.</body>
        </ownedComment>
        <type xmi:type="uml:Class" href="uml-2.5.1/UML.uml#ValueSpecification"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Kgl-39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_k0KgmO39Ee6g0P-x8MVPJg" name="compatibleWith" bodyCondition="_k0Kgmu39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Kgme39Ee6g0P-x8MVPJg" annotatedElement="_k0KgmO39Ee6g0P-x8MVPJg">
          <body>The operation compatibleWith takes another multiplicity as input. It returns true if the other multiplicity is wider than, or the same as, self.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Kgmu39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0KgmO39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgm-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = ((other.lowerBound() &lt;= self.lowerBound()) and ((other.upperBound() = *) or (self.upperBound() &lt;= other.upperBound())))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0KgnO39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_k0Kgne39Ee6g0P-x8MVPJg" name="other" type="_k0Kgc-39Ee6g0P-x8MVPJg"/>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Kgnu39Ee6g0P-x8MVPJg" name="includesMultiplicity" bodyCondition="_k0Kgou39Ee6g0P-x8MVPJg" isQuery="true" precondition="_k0KgoO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kgn-39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgnu39Ee6g0P-x8MVPJg">
          <body>The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0KgoO39Ee6g0P-x8MVPJg" name="pre" constrainedElement="_k0Kgnu39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgoe39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_k0Kgou39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Kgnu39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgo-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = ((self.lowerBound() &lt;= M.lowerBound()) and (self.upperBound() >= M.upperBound()))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0KgpO39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_k0Kgpe39Ee6g0P-x8MVPJg" name="M" type="_k0Kgc-39Ee6g0P-x8MVPJg"/>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Kgpu39Ee6g0P-x8MVPJg" name="is" bodyCondition="_k0KgqO39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Kgp-39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgpu39Ee6g0P-x8MVPJg">
          <body>The operation is determines if the upper and lower bound of the ranges are the ones given.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0KgqO39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Kgpu39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgqe39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (lowerbound = self.lowerBound() and upperbound = self.upperBound())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Kgqu39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_k0Kgq-39Ee6g0P-x8MVPJg" name="lowerbound">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_k0KgrO39Ee6g0P-x8MVPJg" name="upperbound">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Kgre39Ee6g0P-x8MVPJg" name="isMultivalued" bodyCondition="_k0Kgse39Ee6g0P-x8MVPJg" isQuery="true" precondition="_k0Kgr-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kgru39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgre39Ee6g0P-x8MVPJg">
          <body>The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Kgr-39Ee6g0P-x8MVPJg" name="pre" constrainedElement="_k0Kgre39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0KgsO39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>upperBound()->notEmpty()</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_k0Kgse39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Kgre39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgsu39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (upperBound() > 1)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Kgs-39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0KgtO39Ee6g0P-x8MVPJg" name="lower" bodyCondition="_k0Kgtu39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Kgte39Ee6g0P-x8MVPJg" annotatedElement="_k0KgtO39Ee6g0P-x8MVPJg">
          <body>The derived lower attribute must equal the lowerBound.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Kgtu39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0KgtO39Ee6g0P-x8MVPJg _k0Kgju39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgt-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (lowerBound())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0KguO39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Kgue39Ee6g0P-x8MVPJg"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Kguu39Ee6g0P-x8MVPJg" name="lowerBound" bodyCondition="_k0KgvO39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Kgu-39Ee6g0P-x8MVPJg" annotatedElement="_k0Kguu39Ee6g0P-x8MVPJg">
          <body>The query lowerBound() returns the lower bound of the multiplicity as an integer, which is the integerValue of lowerValue, if this is given, and 1 otherwise.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0KgvO39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Kguu39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgve39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (if (lowerValue=null or lowerValue.integerValue()=null) then 1 else lowerValue.integerValue() endif)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Kgvu39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Kgv-39Ee6g0P-x8MVPJg" name="upper" bodyCondition="_k0Kgwe39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0KgwO39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgv-39Ee6g0P-x8MVPJg">
          <body>The derived upper attribute must equal the upperBound.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Kgwe39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Kgv-39Ee6g0P-x8MVPJg _k0Kgk-39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgwu39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (upperBound())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Kgw-39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0KgxO39Ee6g0P-x8MVPJg"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Kgxe39Ee6g0P-x8MVPJg" name="upperBound" bodyCondition="_k0Kgx-39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Kgxu39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgxe39Ee6g0P-x8MVPJg">
          <body>The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural, which is the unlimitedNaturalValue of upperValue, if given, and 1, otherwise.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Kgx-39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Kgxe39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0KgyO39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (if (upperValue=null or upperValue.unlimitedValue()=null) then 1 else upperValue.unlimitedValue() endif)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Kgye39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="NamedElement" name="NamedElement" isAbstract="true">
      <ownedComment xmi:id="_k0Kgyu39Ee6g0P-x8MVPJg" annotatedElement="NamedElement">
        <body>A NamedElement is an Element in a model that may have a name. The name may be given directly and/or via the use of a StringExpression.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0Kgy-39Ee6g0P-x8MVPJg" name="visibility_needs_ownership" constrainedElement="NamedElement">
        <ownedComment xmi:id="_k0KgzO39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgy-39Ee6g0P-x8MVPJg">
          <body>If a NamedElement is owned by something other than a Namespace, it does not have a visibility. One that is not owned by anything (and hence must be a Package, as this is the only kind of NamedElement that overrides mustBeOwned()) may have a visibility.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kgze39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>(namespace = null and owner &lt;> null) implies visibility = null</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0Kgzu39Ee6g0P-x8MVPJg" name="has_qualified_name" constrainedElement="NamedElement">
        <ownedComment xmi:id="_k0Kgz-39Ee6g0P-x8MVPJg" annotatedElement="_k0Kgzu39Ee6g0P-x8MVPJg">
          <body>When there is a name, and all of the containing Namespaces have a name, the qualifiedName is constructed from the name of the NamedElement and the names of the containing Namespaces.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kg0O39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>(name &lt;> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies
  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0Kg0e39Ee6g0P-x8MVPJg" name="has_no_qualified_name" constrainedElement="NamedElement">
        <ownedComment xmi:id="_k0Kg0u39Ee6g0P-x8MVPJg" annotatedElement="_k0Kg0e39Ee6g0P-x8MVPJg">
          <body>If there is no name, or one of the containing Namespaces has no name, there is no qualifiedName.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kg0-39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0Kg1O39Ee6g0P-x8MVPJg" general="Element"/>
      <ownedAttribute xmi:id="_k0Kg1e39Ee6g0P-x8MVPJg" name="clientDependency" type="Dependency" isDerived="true" subsettedProperty="_k0WGlO39Ee6g0P-x8MVPJg" association="_k0WGhO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kg1u39Ee6g0P-x8MVPJg" annotatedElement="_k0Kg1e39Ee6g0P-x8MVPJg">
          <body>Indicates the Dependencies that reference this NamedElement as a client.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Kg1-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0Kg2O39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0Kg2e39Ee6g0P-x8MVPJg" name="name">
        <ownedComment xmi:id="_k0Kg2u39Ee6g0P-x8MVPJg" annotatedElement="_k0Kg2e39Ee6g0P-x8MVPJg">
          <body>The name of the NamedElement.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Kg2-39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0Kg3O39Ee6g0P-x8MVPJg" name="nameExpression" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg" association="_k0WGge39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kg3e39Ee6g0P-x8MVPJg" annotatedElement="_k0Kg3O39Ee6g0P-x8MVPJg">
          <body>The StringExpression used to define the name of this NamedElement.</body>
        </ownedComment>
        <type xmi:type="uml:Class" href="uml-2.5.1/UML.uml#StringExpression"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Kg3u39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0Kg3-39Ee6g0P-x8MVPJg" name="namespace" type="Namespace" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_k0WGeu39Ee6g0P-x8MVPJg Element-owner" association="_k0WGdu39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kg4O39Ee6g0P-x8MVPJg" annotatedElement="_k0Kg3-39Ee6g0P-x8MVPJg">
          <body>Specifies the Namespace that owns the NamedElement.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Kg4e39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0Kg4u39Ee6g0P-x8MVPJg" name="qualifiedName" isReadOnly="true" isDerived="true">
        <ownedComment xmi:id="_k0Kg4-39Ee6g0P-x8MVPJg" annotatedElement="_k0Kg4u39Ee6g0P-x8MVPJg">
          <body>A name that allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing Namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Kg5O39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0Kg5e39Ee6g0P-x8MVPJg" name="visibility" type="_k0ROg-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0Kg5u39Ee6g0P-x8MVPJg" annotatedElement="_k0Kg5e39Ee6g0P-x8MVPJg">
          <body>Determines whether and how the NamedElement is visible outside its owning Namespace.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Kg5-39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_k0Kg6O39Ee6g0P-x8MVPJg" name="allNamespaces" bodyCondition="_k0Kg6u39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Kg6e39Ee6g0P-x8MVPJg" annotatedElement="_k0Kg6O39Ee6g0P-x8MVPJg">
          <body>The query allNamespaces() gives the sequence of Namespaces in which the NamedElement is nested, working outwards.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Kg6u39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Kg6O39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kg6-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (
if owner = null
  then OrderedSet{}
else
  let enclosingNamespace : Namespace =
    if owner.oclIsKindOf(TemplateParameter) and owner.oclAsType(TemplateParameter).signature.template.oclIsKindOf(Namespace)
      then owner.oclAsType(TemplateParameter).signature.template.oclAsType(Namespace)
    else
      namespace
    endif
  in enclosingNamespace.allNamespaces()->prepend(enclosingNamespace)
endif)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Kg7O39Ee6g0P-x8MVPJg" name="result" type="Namespace" isOrdered="true" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Kg7e39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0Kg7u39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Kg7-39Ee6g0P-x8MVPJg" name="allOwningPackages" bodyCondition="_k0Kg8e39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Kg8O39Ee6g0P-x8MVPJg" annotatedElement="_k0Kg7-39Ee6g0P-x8MVPJg">
          <body>The query allOwningPackages() returns the set of all the enclosing Namespaces of this NamedElement, working outwards, that are Packages, up to but not including the first such Namespace that is not a Package.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Kg8e39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Kg7-39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kg8u39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (if namespace.oclIsKindOf(Package)&#xD;
then&#xD;
  let owningPackage : Package = namespace.oclAsType(Package) in&#xD;
    owningPackage->union(owningPackage.allOwningPackages())&#xD;
else&#xD;
  null&#xD;
endif)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Kg8-39Ee6g0P-x8MVPJg" name="result" type="Package" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Kg9O39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0Kg9e39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Kg9u39Ee6g0P-x8MVPJg" name="isDistinguishableFrom" bodyCondition="_k0Kg-O39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Kg9-39Ee6g0P-x8MVPJg" annotatedElement="_k0Kg9u39Ee6g0P-x8MVPJg">
          <body>The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have types neither of which is a kind of the other or (b) they have different names.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Kg-O39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Kg9u39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Kg-e39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = ((self.oclIsKindOf(n.oclType()) or n.oclIsKindOf(self.oclType())) implies
    ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()
)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Kg-u39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_k0Kg--39Ee6g0P-x8MVPJg" name="n" type="NamedElement"/>
        <ownedParameter xmi:id="_k0Kg_O39Ee6g0P-x8MVPJg" name="ns" type="Namespace"/>
      </ownedOperation>
      <ownedOperation xmi:id="_k0OxoO39Ee6g0P-x8MVPJg" name="qualifiedName" bodyCondition="_k0Oxou39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Oxoe39Ee6g0P-x8MVPJg" annotatedElement="_k0OxoO39Ee6g0P-x8MVPJg">
          <body>When a NamedElement has a name, and all of its containing Namespaces have a name, the qualifiedName is constructed from the name of the NamedElement and the names of the containing Namespaces.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Oxou39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0OxoO39Ee6g0P-x8MVPJg _k0Kg4u39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Oxo-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (if self.name &lt;> null and self.allNamespaces()->select( ns | ns.name=null )->isEmpty()
then 
    self.allNamespaces()->iterate( ns : Namespace; agg: String = self.name | ns.name.concat(self.separator()).concat(agg))
else
   null
endif)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0OxpO39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Oxpe39Ee6g0P-x8MVPJg" name="separator" bodyCondition="_k0Oxp-39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Oxpu39Ee6g0P-x8MVPJg" annotatedElement="_k0Oxpe39Ee6g0P-x8MVPJg">
          <body>The query separator() gives the string that is used to separate names when constructing a qualifiedName.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Oxp-39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Oxpe39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0OxqO39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = ('::')</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Oxqe39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Oxqu39Ee6g0P-x8MVPJg" name="clientDependency" bodyCondition="_k0Oxq-39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedRule xmi:id="_k0Oxq-39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Oxqu39Ee6g0P-x8MVPJg _k0Kg1e39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0OxrO39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (Dependency.allInstances()->select(d | d.client->includes(self)))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Oxre39Ee6g0P-x8MVPJg" name="result" type="Dependency" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Oxru39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0Oxr-39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Namespace" name="Namespace" isAbstract="true">
      <ownedComment xmi:id="_k0OxsO39Ee6g0P-x8MVPJg" annotatedElement="Namespace">
        <body>A Namespace is an Element in a model that owns and/or imports a set of NamedElements that can be identified by name.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0Oxse39Ee6g0P-x8MVPJg" name="members_distinguishable" constrainedElement="Namespace">
        <ownedComment xmi:id="_k0Oxsu39Ee6g0P-x8MVPJg" annotatedElement="_k0Oxse39Ee6g0P-x8MVPJg">
          <body>All the members of a Namespace are distinguishable within it.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Oxs-39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>membersAreDistinguishable()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0OxtO39Ee6g0P-x8MVPJg" name="cannot_import_self" constrainedElement="Namespace">
        <ownedComment xmi:id="_k0Oxte39Ee6g0P-x8MVPJg" annotatedElement="_k0OxtO39Ee6g0P-x8MVPJg">
          <body>A Namespace cannot have a PackageImport to itself.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Oxtu39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>packageImport.importedPackage.oclAsType(Namespace)->excludes(self)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0PYsO39Ee6g0P-x8MVPJg" name="cannot_import_ownedMembers" constrainedElement="Namespace">
        <ownedComment xmi:id="_k0PYse39Ee6g0P-x8MVPJg" annotatedElement="_k0PYsO39Ee6g0P-x8MVPJg">
          <body>A Namespace cannot have an ElementImport to one of its ownedMembers.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0PYsu39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0PYs-39Ee6g0P-x8MVPJg" general="NamedElement"/>
      <ownedAttribute xmi:id="_k0PYtO39Ee6g0P-x8MVPJg" name="elementImport" type="_k0KgW-39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0WGlO39Ee6g0P-x8MVPJg _k0KgSu39Ee6g0P-x8MVPJg" association="_k0WGde39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0PYte39Ee6g0P-x8MVPJg" annotatedElement="_k0PYtO39Ee6g0P-x8MVPJg">
          <body>References the ElementImports owned by the Namespace.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0PYtu39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0PYt-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0PYuO39Ee6g0P-x8MVPJg" name="importedMember" type="PackageableElement" isReadOnly="true" isDerived="true" subsettedProperty="_k0PYvO39Ee6g0P-x8MVPJg" association="_k0WGfe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0PYue39Ee6g0P-x8MVPJg" annotatedElement="_k0PYuO39Ee6g0P-x8MVPJg">
          <body>References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0PYuu39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0PYu-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0PYvO39Ee6g0P-x8MVPJg" name="member" type="NamedElement" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_k0WGee39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0PYve39Ee6g0P-x8MVPJg" annotatedElement="_k0PYvO39Ee6g0P-x8MVPJg">
          <body>A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0PYvu39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0PYv-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0PYwO39Ee6g0P-x8MVPJg" name="ownedMember" type="NamedElement" isReadOnly="true" aggregation="composite" isDerived="true" isDerivedUnion="true" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg _k0PYvO39Ee6g0P-x8MVPJg" association="_k0WGdu39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0PYwe39Ee6g0P-x8MVPJg" annotatedElement="_k0PYwO39Ee6g0P-x8MVPJg">
          <body>A collection of NamedElements owned by the Namespace.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0PYwu39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0PYw-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0PYxO39Ee6g0P-x8MVPJg" name="ownedRule" type="_k0JSEO39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0PYwO39Ee6g0P-x8MVPJg" association="_k0WGd-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0PYxe39Ee6g0P-x8MVPJg" annotatedElement="_k0PYxO39Ee6g0P-x8MVPJg">
          <body>Specifies a set of Constraints owned by this Namespace.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0PYxu39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0PYx-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0PYyO39Ee6g0P-x8MVPJg" name="packageImport" type="_k0RN6u39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0WGlO39Ee6g0P-x8MVPJg _k0KgSu39Ee6g0P-x8MVPJg" association="_k0WGeO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0PYye39Ee6g0P-x8MVPJg" annotatedElement="_k0PYyO39Ee6g0P-x8MVPJg">
          <body>References the PackageImports owned by the Namespace.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0PYyu39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0PYy-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_k0Qm0O39Ee6g0P-x8MVPJg" name="excludeCollisions" bodyCondition="_k0Qm0u39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Qm0e39Ee6g0P-x8MVPJg" annotatedElement="_k0Qm0O39Ee6g0P-x8MVPJg">
          <body>The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this Namespace.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Qm0u39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Qm0O39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Qm0-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (imps->reject(imp1  | imps->exists(imp2 | not imp1.isDistinguishableFrom(imp2, self))))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Qm1O39Ee6g0P-x8MVPJg" name="result" type="PackageableElement" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Qm1e39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0Qm1u39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
        <ownedParameter xmi:id="_k0Qm1-39Ee6g0P-x8MVPJg" name="imps" type="PackageableElement">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Qm2O39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0Qm2e39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Qm2u39Ee6g0P-x8MVPJg" name="getNamesOfMember" bodyCondition="_k0Qm3O39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Qm2-39Ee6g0P-x8MVPJg" annotatedElement="_k0Qm2u39Ee6g0P-x8MVPJg">
          <body>The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace, taking importing into account. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Qm3O39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Qm2u39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Qm3e39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (if self.ownedMember ->includes(element)
then Set{element.name}
else let elementImports : Set(ElementImport) = self.elementImport->select(ei | ei.importedElement = element) in
  if elementImports->notEmpty()
  then
     elementImports->collect(el | el.getName())->asSet()
  else 
     self.packageImport->select(pi | pi.importedPackage.visibleMembers().oclAsType(NamedElement)->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))->asSet()
  endif
endif)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Qm3u39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Qm3-39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0Qm4O39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
        <ownedParameter xmi:id="_k0Qm4e39Ee6g0P-x8MVPJg" name="element" type="NamedElement"/>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Qm4u39Ee6g0P-x8MVPJg" name="importMembers" bodyCondition="_k0Qm5O39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Qm4-39Ee6g0P-x8MVPJg" annotatedElement="_k0Qm4u39Ee6g0P-x8MVPJg">
          <body>The query importMembers() defines which of a set of PackageableElements are actually imported into the Namespace. This excludes hidden ones, i.e., those which have names that conflict with names of ownedMembers, and it also excludes PackageableElements that would have the indistinguishable names when imported.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Qm5O39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Qm4u39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Qm5e39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem | imp.isDistinguishableFrom(mem, self))))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Qm5u39Ee6g0P-x8MVPJg" name="result" type="PackageableElement" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Qm5-39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0Qm6O39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
        <ownedParameter xmi:id="_k0Qm6e39Ee6g0P-x8MVPJg" name="imps" type="PackageableElement">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Qm6u39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0Qm6-39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Qm7O39Ee6g0P-x8MVPJg" name="importedMember" bodyCondition="_k0Qm7u39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Qm7e39Ee6g0P-x8MVPJg" annotatedElement="_k0Qm7O39Ee6g0P-x8MVPJg">
          <body>The importedMember property is derived as the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Qm7u39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Qm7O39Ee6g0P-x8MVPJg _k0PYuO39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Qm7-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (self.importMembers(elementImport.importedElement->asSet()->union(packageImport.importedPackage->collect(p | p.visibleMembers()))->asSet()))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Qm8O39Ee6g0P-x8MVPJg" name="result" type="PackageableElement" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0Qm8e39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0Qm8u39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0Qm8-39Ee6g0P-x8MVPJg" name="membersAreDistinguishable" bodyCondition="_k0Qm9e39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0Qm9O39Ee6g0P-x8MVPJg" annotatedElement="_k0Qm8-39Ee6g0P-x8MVPJg">
          <body>The Boolean query membersAreDistinguishable() determines whether all of the Namespace's members are distinguishable within it.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0Qm9e39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0Qm8-39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0Qm9u39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (member->forAll( memb |
   member->excluding(memb)->forAll(other |
       memb.isDistinguishableFrom(other, self))))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0Qm9-39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="PackageableElement" name="PackageableElement" isAbstract="true">
      <ownedComment xmi:id="_k0RN4O39Ee6g0P-x8MVPJg" annotatedElement="PackageableElement">
        <body>A PackageableElement is a NamedElement that may be owned directly by a Package. A PackageableElement is also able to serve as the parameteredElement of a TemplateParameter.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0RN4e39Ee6g0P-x8MVPJg" name="namespace_needs_visibility" constrainedElement="PackageableElement">
        <ownedComment xmi:id="_k0RN4u39Ee6g0P-x8MVPJg" annotatedElement="_k0RN4e39Ee6g0P-x8MVPJg">
          <body>A PackageableElement owned by a Namespace must have a visibility.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0RN4-39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>visibility = null implies namespace = null</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0RN5O39Ee6g0P-x8MVPJg" general="_k0RN9-39Ee6g0P-x8MVPJg"/>
      <generalization xmi:id="_k0RN5e39Ee6g0P-x8MVPJg" general="NamedElement"/>
      <ownedAttribute xmi:id="_k0RN5u39Ee6g0P-x8MVPJg" name="visibility" type="_k0ROg-39Ee6g0P-x8MVPJg" redefinedProperty="_k0Kg5e39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0RN5-39Ee6g0P-x8MVPJg" annotatedElement="_k0RN5u39Ee6g0P-x8MVPJg">
          <body>A PackageableElement must have a visibility specified if it is owned by a Namespace. The default visibility is public.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0RN6O39Ee6g0P-x8MVPJg"/>
        <defaultValue xmi:type="uml:InstanceValue" xmi:id="_k0RN6e39Ee6g0P-x8MVPJg" type="_k0ROg-39Ee6g0P-x8MVPJg" instance="_k0ROhe39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0RN6u39Ee6g0P-x8MVPJg" name="PackageImport">
      <ownedComment xmi:id="_k0RN6-39Ee6g0P-x8MVPJg" annotatedElement="_k0RN6u39Ee6g0P-x8MVPJg">
        <body>A PackageImport is a Relationship that imports all the non-private members of a Package into the Namespace owning the PackageImport, so that those Elements may be referred to by their unqualified names in the importingNamespace.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0RN7O39Ee6g0P-x8MVPJg" name="public_or_private" constrainedElement="_k0RN6u39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0RN7e39Ee6g0P-x8MVPJg" annotatedElement="_k0RN7O39Ee6g0P-x8MVPJg">
          <body>The visibility of a PackageImport is either public or private.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0RN7u39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>visibility = VisibilityKind::public or visibility = VisibilityKind::private</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0RN7-39Ee6g0P-x8MVPJg" general="DirectedRelationship"/>
      <ownedAttribute xmi:id="_k0RN8O39Ee6g0P-x8MVPJg" name="importedPackage" type="Package" subsettedProperty="_k0KgPO39Ee6g0P-x8MVPJg" association="_k0WGce39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0RN8e39Ee6g0P-x8MVPJg" annotatedElement="_k0RN8O39Ee6g0P-x8MVPJg">
          <body>Specifies the Package whose members are imported into a Namespace.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0RN8u39Ee6g0P-x8MVPJg" name="importingNamespace" type="Namespace" subsettedProperty="_k0KgOe39Ee6g0P-x8MVPJg Element-owner" association="_k0WGeO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0RN8-39Ee6g0P-x8MVPJg" annotatedElement="_k0RN8u39Ee6g0P-x8MVPJg">
          <body>Specifies the Namespace that imports the members from a Package.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0RN9O39Ee6g0P-x8MVPJg" name="visibility" type="_k0ROg-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0RN9e39Ee6g0P-x8MVPJg" annotatedElement="_k0RN9O39Ee6g0P-x8MVPJg">
          <body>Specifies the visibility of the imported PackageableElements within the importingNamespace, i.e., whether imported Elements will in turn be visible to other Namespaces. If the PackageImport is public, the imported Elements will be visible outside the importingNamespace, while, if the PackageImport is private, they will not.</body>
        </ownedComment>
        <defaultValue xmi:type="uml:InstanceValue" xmi:id="_k0RN9u39Ee6g0P-x8MVPJg" type="_k0ROg-39Ee6g0P-x8MVPJg" instance="_k0ROhe39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0RN9-39Ee6g0P-x8MVPJg" name="ParameterableElement" isAbstract="true">
      <ownedComment xmi:id="_k0RN-O39Ee6g0P-x8MVPJg" annotatedElement="_k0RN9-39Ee6g0P-x8MVPJg">
        <body>A ParameterableElement is an Element that can be exposed as a formal TemplateParameter for a template, or specified as an actual parameter in a binding of a template.</body>
      </ownedComment>
      <generalization xmi:id="_k0RN-e39Ee6g0P-x8MVPJg" general="Element"/>
      <ownedAttribute xmi:id="_k0RN-u39Ee6g0P-x8MVPJg" name="owningTemplateParameter" type="_k0ROOu39Ee6g0P-x8MVPJg" subsettedProperty="Element-owner _k0RN_e39Ee6g0P-x8MVPJg" association="_k0WGYO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0RN--39Ee6g0P-x8MVPJg" annotatedElement="_k0RN-u39Ee6g0P-x8MVPJg">
          <body>The formal TemplateParameter that owns this ParameterableElement.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0RN_O39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0RN_e39Ee6g0P-x8MVPJg" name="templateParameter" type="_k0ROOu39Ee6g0P-x8MVPJg" association="_k0WGZe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0RN_u39Ee6g0P-x8MVPJg" annotatedElement="_k0RN_e39Ee6g0P-x8MVPJg">
          <body>The TemplateParameter that exposes this ParameterableElement as a formal parameter.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0RN_-39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_k0ROAO39Ee6g0P-x8MVPJg" name="isCompatibleWith" bodyCondition="_k0ROAu39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0ROAe39Ee6g0P-x8MVPJg" annotatedElement="_k0ROAO39Ee6g0P-x8MVPJg">
          <body>The query isCompatibleWith() determines if this ParameterableElement is compatible with the specified ParameterableElement. By default, this ParameterableElement is compatible with another ParameterableElement p if the kind of this ParameterableElement is the same as or a subtype of the kind of p. Subclasses of ParameterableElement should override this operation to specify different compatibility constraints.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0ROAu39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0ROAO39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0ROA-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (self.oclIsKindOf(p.oclType()))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0ROBO39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_k0ROBe39Ee6g0P-x8MVPJg" name="p" type="_k0RN9-39Ee6g0P-x8MVPJg"/>
      </ownedOperation>
      <ownedOperation xmi:id="_k0ROBu39Ee6g0P-x8MVPJg" name="isTemplateParameter" bodyCondition="_k0ROCO39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0ROB-39Ee6g0P-x8MVPJg" annotatedElement="_k0ROBu39Ee6g0P-x8MVPJg">
          <body>The query isTemplateParameter() determines if this ParameterableElement is exposed as a formal TemplateParameter.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0ROCO39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0ROBu39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0ROCe39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (templateParameter->notEmpty())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0ROCu39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0ROC-39Ee6g0P-x8MVPJg" name="Realization">
      <ownedComment xmi:id="_k0RODO39Ee6g0P-x8MVPJg" annotatedElement="_k0ROC-39Ee6g0P-x8MVPJg">
        <body>Realization is a specialized Abstraction relationship between two sets of model Elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc.</body>
      </ownedComment>
      <generalization xmi:id="_k0RODe39Ee6g0P-x8MVPJg" general="_k0G15-39Ee6g0P-x8MVPJg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Relationship" name="Relationship" isAbstract="true">
      <ownedComment xmi:id="_k0RODu39Ee6g0P-x8MVPJg" annotatedElement="Relationship">
        <body>Relationship is an abstract concept that specifies some kind of relationship between Elements.</body>
      </ownedComment>
      <generalization xmi:id="_k0ROD-39Ee6g0P-x8MVPJg" general="Element"/>
      <ownedAttribute xmi:id="_k0ROEO39Ee6g0P-x8MVPJg" name="relatedElement" type="Element" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_k0WGbe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROEe39Ee6g0P-x8MVPJg" annotatedElement="_k0ROEO39Ee6g0P-x8MVPJg">
          <body>Specifies the elements related by the Relationship.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0ROEu39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0ROE-39Ee6g0P-x8MVPJg" name="TemplateableElement" isAbstract="true">
      <ownedComment xmi:id="_k0ROFO39Ee6g0P-x8MVPJg" annotatedElement="_k0ROE-39Ee6g0P-x8MVPJg">
        <body>A TemplateableElement is an Element that can optionally be defined as a template and bound to other templates.</body>
      </ownedComment>
      <generalization xmi:id="_k0ROFe39Ee6g0P-x8MVPJg" general="Element"/>
      <ownedAttribute xmi:id="_k0ROFu39Ee6g0P-x8MVPJg" name="ownedTemplateSignature" type="_k0ROXO39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg" association="_k0WGbO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROF-39Ee6g0P-x8MVPJg" annotatedElement="_k0ROFu39Ee6g0P-x8MVPJg">
          <body>The optional TemplateSignature specifying the formal TemplateParameters for this TemplateableElement. If a TemplateableElement has a TemplateSignature, then it is a template.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0ROGO39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0ROGe39Ee6g0P-x8MVPJg" name="templateBinding" type="_k0ROKe39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0WGlO39Ee6g0P-x8MVPJg _k0KgSu39Ee6g0P-x8MVPJg" association="_k0WGa-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROGu39Ee6g0P-x8MVPJg" annotatedElement="_k0ROGe39Ee6g0P-x8MVPJg">
          <body>The optional TemplateBindings from this TemplateableElement to one or more templates.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0ROG-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0ROHO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_k0ROHe39Ee6g0P-x8MVPJg" name="isTemplate" bodyCondition="_k0ROH-39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0ROHu39Ee6g0P-x8MVPJg" annotatedElement="_k0ROHe39Ee6g0P-x8MVPJg">
          <body>The query isTemplate() returns whether this TemplateableElement is actually a template.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0ROH-39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0ROHe39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0ROIO39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (ownedTemplateSignature &lt;> null)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0ROIe39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0ROIu39Ee6g0P-x8MVPJg" name="parameterableElements" bodyCondition="_k0ROJO39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0ROI-39Ee6g0P-x8MVPJg" annotatedElement="_k0ROIu39Ee6g0P-x8MVPJg">
          <body>The query parameterableElements() returns the set of ParameterableElements that may be used as the parameteredElements for a TemplateParameter of this TemplateableElement. By default, this set includes all the ownedElements. Subclasses may override this operation if they choose to restrict the set of ParameterableElements.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0ROJO39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0ROIu39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0ROJe39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (self.allOwnedElements()->select(oclIsKindOf(ParameterableElement)).oclAsType(ParameterableElement)->asSet())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0ROJu39Ee6g0P-x8MVPJg" name="result" type="_k0RN9-39Ee6g0P-x8MVPJg" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0ROJ-39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0ROKO39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0ROKe39Ee6g0P-x8MVPJg" name="TemplateBinding">
      <ownedComment xmi:id="_k0ROKu39Ee6g0P-x8MVPJg" annotatedElement="_k0ROKe39Ee6g0P-x8MVPJg">
        <body>A TemplateBinding is a DirectedRelationship between a TemplateableElement and a template. A TemplateBinding specifies the TemplateParameterSubstitutions of actual parameters for the formal parameters of the template.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0ROK-39Ee6g0P-x8MVPJg" name="parameter_substitution_formal" constrainedElement="_k0ROKe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROLO39Ee6g0P-x8MVPJg" annotatedElement="_k0ROK-39Ee6g0P-x8MVPJg">
          <body>Each parameterSubstitution must refer to a formal TemplateParameter of the target TemplateSignature.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0ROLe39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0ROLu39Ee6g0P-x8MVPJg" name="one_parameter_substitution" constrainedElement="_k0ROKe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROL-39Ee6g0P-x8MVPJg" annotatedElement="_k0ROLu39Ee6g0P-x8MVPJg">
          <body>A TemplateBiinding contains at most one TemplateParameterSubstitution for each formal TemplateParameter of the target TemplateSignature.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0ROMO39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() &lt;= 1)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0ROMe39Ee6g0P-x8MVPJg" general="DirectedRelationship"/>
      <ownedAttribute xmi:id="_k0ROMu39Ee6g0P-x8MVPJg" name="boundElement" type="_k0ROE-39Ee6g0P-x8MVPJg" subsettedProperty="_k0KgOe39Ee6g0P-x8MVPJg Element-owner" association="_k0WGa-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROM-39Ee6g0P-x8MVPJg" annotatedElement="_k0ROMu39Ee6g0P-x8MVPJg">
          <body>The TemplateableElement that is bound by this TemplateBinding.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0RONO39Ee6g0P-x8MVPJg" name="parameterSubstitution" type="_k0ROTe39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg" association="_k0WGau39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0RONe39Ee6g0P-x8MVPJg" annotatedElement="_k0RONO39Ee6g0P-x8MVPJg">
          <body>The TemplateParameterSubstitutions owned by this TemplateBinding.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0RONu39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0RON-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0ROOO39Ee6g0P-x8MVPJg" name="signature" type="_k0ROXO39Ee6g0P-x8MVPJg" subsettedProperty="_k0KgPO39Ee6g0P-x8MVPJg" association="_k0WGZu39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROOe39Ee6g0P-x8MVPJg" annotatedElement="_k0ROOO39Ee6g0P-x8MVPJg">
          <body>The TemplateSignature for the template that is the target of this TemplateBinding.</body>
        </ownedComment>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0ROOu39Ee6g0P-x8MVPJg" name="TemplateParameter">
      <ownedComment xmi:id="_k0ROO-39Ee6g0P-x8MVPJg" annotatedElement="_k0ROOu39Ee6g0P-x8MVPJg">
        <body>A TemplateParameter exposes a ParameterableElement as a formal parameter of a template.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0ROPO39Ee6g0P-x8MVPJg" name="must_be_compatible" constrainedElement="_k0ROOu39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROPe39Ee6g0P-x8MVPJg" annotatedElement="_k0ROPO39Ee6g0P-x8MVPJg">
          <body>The default must be compatible with the formal TemplateParameter.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0ROPu39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>default &lt;> null implies default.isCompatibleWith(parameteredElement)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0ROP-39Ee6g0P-x8MVPJg" general="Element"/>
      <ownedAttribute xmi:id="_k0ROQO39Ee6g0P-x8MVPJg" name="default" type="_k0RN9-39Ee6g0P-x8MVPJg" association="_k0WGYe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROQe39Ee6g0P-x8MVPJg" annotatedElement="_k0ROQO39Ee6g0P-x8MVPJg">
          <body>The ParameterableElement that is the default for this formal TemplateParameter.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0ROQu39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0ROQ-39Ee6g0P-x8MVPJg" name="ownedDefault" type="_k0RN9-39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg _k0ROQO39Ee6g0P-x8MVPJg" association="_k0VfZe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0RORO39Ee6g0P-x8MVPJg" annotatedElement="_k0ROQ-39Ee6g0P-x8MVPJg">
          <body>The ParameterableElement that is owned by this TemplateParameter for the purpose of providing a default.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0RORe39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0RORu39Ee6g0P-x8MVPJg" name="ownedParameteredElement" type="_k0RN9-39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg _k0ROSe39Ee6g0P-x8MVPJg" association="_k0WGYO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROR-39Ee6g0P-x8MVPJg" annotatedElement="_k0RORu39Ee6g0P-x8MVPJg">
          <body>The ParameterableElement that is owned by this TemplateParameter for the purpose of exposing it as the parameteredElement.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0ROSO39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0ROSe39Ee6g0P-x8MVPJg" name="parameteredElement" type="_k0RN9-39Ee6g0P-x8MVPJg" association="_k0WGZe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROSu39Ee6g0P-x8MVPJg" annotatedElement="_k0ROSe39Ee6g0P-x8MVPJg">
          <body>The ParameterableElement exposed by this TemplateParameter.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0ROS-39Ee6g0P-x8MVPJg" name="signature" type="_k0ROXO39Ee6g0P-x8MVPJg" subsettedProperty="_k0VfVu39Ee6g0P-x8MVPJg Element-owner" association="_k0VfVO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROTO39Ee6g0P-x8MVPJg" annotatedElement="_k0ROS-39Ee6g0P-x8MVPJg">
          <body>The TemplateSignature that owns this TemplateParameter.</body>
        </ownedComment>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0ROTe39Ee6g0P-x8MVPJg" name="TemplateParameterSubstitution">
      <ownedComment xmi:id="_k0ROTu39Ee6g0P-x8MVPJg" annotatedElement="_k0ROTe39Ee6g0P-x8MVPJg">
        <body>A TemplateParameterSubstitution relates the actual parameter to a formal TemplateParameter as part of a template binding.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0ROT-39Ee6g0P-x8MVPJg" name="must_be_compatible" constrainedElement="_k0ROTe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROUO39Ee6g0P-x8MVPJg" annotatedElement="_k0ROT-39Ee6g0P-x8MVPJg">
          <body>The actual ParameterableElement must be compatible with the formal TemplateParameter, e.g., the actual ParameterableElement for a Class TemplateParameter must be a Class.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0ROUe39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0ROUu39Ee6g0P-x8MVPJg" general="Element"/>
      <ownedAttribute xmi:id="_k0ROU-39Ee6g0P-x8MVPJg" name="actual" type="_k0RN9-39Ee6g0P-x8MVPJg" association="_k0VfWe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROVO39Ee6g0P-x8MVPJg" annotatedElement="_k0ROU-39Ee6g0P-x8MVPJg">
          <body>The ParameterableElement that is the actual parameter for this TemplateParameterSubstitution.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0ROVe39Ee6g0P-x8MVPJg" name="formal" type="_k0ROOu39Ee6g0P-x8MVPJg" association="_k0VfYe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROVu39Ee6g0P-x8MVPJg" annotatedElement="_k0ROVe39Ee6g0P-x8MVPJg">
          <body>The formal TemplateParameter that is associated with this TemplateParameterSubstitution.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0ROV-39Ee6g0P-x8MVPJg" name="ownedActual" type="_k0RN9-39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg _k0ROU-39Ee6g0P-x8MVPJg" association="_k0VfXe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROWO39Ee6g0P-x8MVPJg" annotatedElement="_k0ROV-39Ee6g0P-x8MVPJg">
          <body>The ParameterableElement that is owned by this TemplateParameterSubstitution as its actual parameter.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0ROWe39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0ROWu39Ee6g0P-x8MVPJg" name="templateBinding" type="_k0ROKe39Ee6g0P-x8MVPJg" subsettedProperty="Element-owner" association="_k0WGau39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROW-39Ee6g0P-x8MVPJg" annotatedElement="_k0ROWu39Ee6g0P-x8MVPJg">
          <body>The TemplateBinding that owns this TemplateParameterSubstitution.</body>
        </ownedComment>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0ROXO39Ee6g0P-x8MVPJg" name="TemplateSignature">
      <ownedComment xmi:id="_k0ROXe39Ee6g0P-x8MVPJg" annotatedElement="_k0ROXO39Ee6g0P-x8MVPJg">
        <body>A Template Signature bundles the set of formal TemplateParameters for a template.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0ROXu39Ee6g0P-x8MVPJg" name="own_elements" constrainedElement="_k0ROXO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROX-39Ee6g0P-x8MVPJg" annotatedElement="_k0ROXu39Ee6g0P-x8MVPJg">
          <body>Parameters must own the ParameterableElements they parameter or those ParameterableElements must be owned by the TemplateableElement being templated.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0ROYO39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0ROYe39Ee6g0P-x8MVPJg" name="unique_parameters" constrainedElement="_k0ROXO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROYu39Ee6g0P-x8MVPJg" annotatedElement="_k0ROYe39Ee6g0P-x8MVPJg">
          <body>The names of the parameters of a TemplateSignature are unique.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0ROY-39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>parameter->forAll( p1, p2 | (p1 &lt;> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies&#xD;
   p1.parameteredElement.oclAsType(NamedElement).name &lt;> p2.parameteredElement.oclAsType(NamedElement).name)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0ROZO39Ee6g0P-x8MVPJg" general="Element"/>
      <ownedAttribute xmi:id="_k0ROZe39Ee6g0P-x8MVPJg" name="ownedParameter" type="_k0ROOu39Ee6g0P-x8MVPJg" isOrdered="true" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg _k0ROae39Ee6g0P-x8MVPJg" association="_k0VfVO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROZu39Ee6g0P-x8MVPJg" annotatedElement="_k0ROZe39Ee6g0P-x8MVPJg">
          <body>The formal parameters that are owned by this TemplateSignature.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0ROZ-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0ROaO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0ROae39Ee6g0P-x8MVPJg" name="parameter" type="_k0ROOu39Ee6g0P-x8MVPJg" isOrdered="true" association="_k0VfVe39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROau39Ee6g0P-x8MVPJg" annotatedElement="_k0ROae39Ee6g0P-x8MVPJg">
          <body>The ordered set of all formal TemplateParameters for this TemplateSignature.</body>
        </ownedComment>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0ROa-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0RObO39Ee6g0P-x8MVPJg" name="template" type="_k0ROE-39Ee6g0P-x8MVPJg" subsettedProperty="Element-owner" association="_k0WGbO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0RObe39Ee6g0P-x8MVPJg" annotatedElement="_k0RObO39Ee6g0P-x8MVPJg">
          <body>The TemplateableElement that owns this TemplateSignature.</body>
        </ownedComment>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0RObu39Ee6g0P-x8MVPJg" name="Type" isAbstract="true">
      <ownedComment xmi:id="_k0ROb-39Ee6g0P-x8MVPJg" annotatedElement="_k0RObu39Ee6g0P-x8MVPJg">
        <body>A Type constrains the values represented by a TypedElement.</body>
      </ownedComment>
      <generalization xmi:id="_k0ROcO39Ee6g0P-x8MVPJg" general="PackageableElement"/>
      <ownedAttribute xmi:id="_k0ROce39Ee6g0P-x8MVPJg" name="package" type="Package" subsettedProperty="_k0hFku39Ee6g0P-x8MVPJg" association="_k0hskO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROcu39Ee6g0P-x8MVPJg" annotatedElement="_k0ROce39Ee6g0P-x8MVPJg">
          <body>Specifies the owning Package of this Type, if any.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0ROc-39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_k0ROdO39Ee6g0P-x8MVPJg" name="conformsTo" bodyCondition="_k0ROdu39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0ROde39Ee6g0P-x8MVPJg" annotatedElement="_k0ROdO39Ee6g0P-x8MVPJg">
          <body>The query conformsTo() gives true for a Type that conforms to another. By default, two Types do not conform to each other. This query is intended to be redefined for specific conformance situations.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0ROdu39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0ROdO39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0ROd-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (false)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0ROeO39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_k0ROee39Ee6g0P-x8MVPJg" name="other" type="_k0RObu39Ee6g0P-x8MVPJg"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0ROeu39Ee6g0P-x8MVPJg" name="TypedElement" isAbstract="true">
      <ownedComment xmi:id="_k0ROe-39Ee6g0P-x8MVPJg" annotatedElement="_k0ROeu39Ee6g0P-x8MVPJg">
        <body>A TypedElement is a NamedElement that may have a Type specified for it.</body>
      </ownedComment>
      <generalization xmi:id="_k0ROfO39Ee6g0P-x8MVPJg" general="NamedElement"/>
      <ownedAttribute xmi:id="_k0ROfe39Ee6g0P-x8MVPJg" name="type" type="_k0RObu39Ee6g0P-x8MVPJg" association="_k0VfUO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0ROfu39Ee6g0P-x8MVPJg" annotatedElement="_k0ROfe39Ee6g0P-x8MVPJg">
          <body>The type of the TypedElement.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0ROf-39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0ROgO39Ee6g0P-x8MVPJg" name="Usage">
      <ownedComment xmi:id="_k0ROge39Ee6g0P-x8MVPJg" annotatedElement="_k0ROgO39Ee6g0P-x8MVPJg">
        <body>A Usage is a Dependency in which the client Element requires the supplier Element (or set of Elements) for its full implementation or operation.</body>
      </ownedComment>
      <generalization xmi:id="_k0ROgu39Ee6g0P-x8MVPJg" general="Dependency"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_k0ROg-39Ee6g0P-x8MVPJg" name="VisibilityKind">
      <ownedComment xmi:id="_k0ROhO39Ee6g0P-x8MVPJg" annotatedElement="_k0ROg-39Ee6g0P-x8MVPJg">
        <body>VisibilityKind is an enumeration type that defines literals to determine the visibility of Elements in a model.</body>
      </ownedComment>
      <ownedLiteral xmi:id="_k0ROhe39Ee6g0P-x8MVPJg" name="public">
        <ownedComment xmi:id="_k0ROhu39Ee6g0P-x8MVPJg" annotatedElement="_k0ROhe39Ee6g0P-x8MVPJg">
          <body>A Named Element with public visibility is visible to all elements that can access the contents of the Namespace that owns it.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:id="_k0ROh-39Ee6g0P-x8MVPJg" name="private">
        <ownedComment xmi:id="_k0ROiO39Ee6g0P-x8MVPJg" annotatedElement="_k0ROh-39Ee6g0P-x8MVPJg">
          <body>A NamedElement with private visibility is only visible inside the Namespace that owns it.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:id="_k0ROie39Ee6g0P-x8MVPJg" name="protected">
        <ownedComment xmi:id="_k0ROiu39Ee6g0P-x8MVPJg" annotatedElement="_k0ROie39Ee6g0P-x8MVPJg">
          <body>A NamedElement with protected visibility is visible to Elements that have a generalization relationship to the Namespace that owns it.</body>
        </ownedComment>
      </ownedLiteral>
      <ownedLiteral xmi:id="_k0ROi-39Ee6g0P-x8MVPJg" name="package">
        <ownedComment xmi:id="_k0ROjO39Ee6g0P-x8MVPJg" annotatedElement="_k0ROi-39Ee6g0P-x8MVPJg">
          <body>A NamedElement with package visibility is visible to all Elements within the nearest enclosing Package (given that other owning Elements have proper visibility). Outside the nearest enclosing Package, a NamedElement marked as having package visibility is not visible.  Only NamedElements that are not owned by Packages can be marked as having package visibility.</body>
        </ownedComment>
      </ownedLiteral>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0VfUO39Ee6g0P-x8MVPJg" name="A_type_typedElement" memberEnd="_k0ROfe39Ee6g0P-x8MVPJg _k0VfUe39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0VfUe39Ee6g0P-x8MVPJg" name="typedElement" type="_k0ROeu39Ee6g0P-x8MVPJg" association="_k0VfUO39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0VfUu39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0VfU-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0VfVO39Ee6g0P-x8MVPJg" name="A_ownedParameter_signature" memberEnd="_k0ROZe39Ee6g0P-x8MVPJg _k0ROS-39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0VfVe39Ee6g0P-x8MVPJg" name="A_parameter_templateSignature" memberEnd="_k0ROae39Ee6g0P-x8MVPJg _k0VfVu39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0VfVu39Ee6g0P-x8MVPJg" name="templateSignature" type="_k0ROXO39Ee6g0P-x8MVPJg" association="_k0VfVe39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0VfV-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0VfWO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0VfWe39Ee6g0P-x8MVPJg" name="A_actual_templateParameterSubstitution" memberEnd="_k0ROU-39Ee6g0P-x8MVPJg _k0VfWu39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0VfWu39Ee6g0P-x8MVPJg" name="templateParameterSubstitution" type="_k0ROTe39Ee6g0P-x8MVPJg" association="_k0VfWe39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0VfW-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0VfXO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0VfXe39Ee6g0P-x8MVPJg" name="A_ownedActual_owningTemplateParameterSubstitution" memberEnd="_k0ROV-39Ee6g0P-x8MVPJg _k0VfX-39Ee6g0P-x8MVPJg">
      <generalization xmi:id="_k0VfXu39Ee6g0P-x8MVPJg" general="_k0VfWe39Ee6g0P-x8MVPJg"/>
      <ownedEnd xmi:id="_k0VfX-39Ee6g0P-x8MVPJg" name="owningTemplateParameterSubstitution" type="_k0ROTe39Ee6g0P-x8MVPJg" redefinedProperty="_k0VfWu39Ee6g0P-x8MVPJg" subsettedProperty="Element-owner" association="_k0VfXe39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0VfYO39Ee6g0P-x8MVPJg"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0VfYe39Ee6g0P-x8MVPJg" name="A_formal_templateParameterSubstitution" memberEnd="_k0ROVe39Ee6g0P-x8MVPJg _k0VfYu39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0VfYu39Ee6g0P-x8MVPJg" name="templateParameterSubstitution" type="_k0ROTe39Ee6g0P-x8MVPJg" association="_k0VfYe39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0VfY-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0VfZO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0VfZe39Ee6g0P-x8MVPJg" name="A_ownedDefault_templateParameter" memberEnd="_k0ROQ-39Ee6g0P-x8MVPJg _k0VfZ-39Ee6g0P-x8MVPJg">
      <generalization xmi:id="_k0VfZu39Ee6g0P-x8MVPJg" general="_k0WGYe39Ee6g0P-x8MVPJg"/>
      <ownedEnd xmi:id="_k0VfZ-39Ee6g0P-x8MVPJg" name="templateParameter" type="_k0ROOu39Ee6g0P-x8MVPJg" redefinedProperty="_k0WGYu39Ee6g0P-x8MVPJg" subsettedProperty="Element-owner" association="_k0VfZe39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0VfaO39Ee6g0P-x8MVPJg"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGYO39Ee6g0P-x8MVPJg" name="A_ownedParameteredElement_owningTemplateParameter" memberEnd="_k0RORu39Ee6g0P-x8MVPJg _k0RN-u39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGYe39Ee6g0P-x8MVPJg" name="A_default_templateParameter" memberEnd="_k0ROQO39Ee6g0P-x8MVPJg _k0WGYu39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGYu39Ee6g0P-x8MVPJg" name="templateParameter" type="_k0ROOu39Ee6g0P-x8MVPJg" association="_k0WGYe39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGY-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0WGZO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGZe39Ee6g0P-x8MVPJg" name="A_parameteredElement_templateParameter" memberEnd="_k0ROSe39Ee6g0P-x8MVPJg _k0RN_e39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGZu39Ee6g0P-x8MVPJg" name="A_signature_templateBinding" memberEnd="_k0ROOO39Ee6g0P-x8MVPJg _k0WGZ-39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGZ-39Ee6g0P-x8MVPJg" name="templateBinding" type="_k0ROKe39Ee6g0P-x8MVPJg" subsettedProperty="_k0WGmO39Ee6g0P-x8MVPJg" association="_k0WGZu39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGaO39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0WGae39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGau39Ee6g0P-x8MVPJg" name="A_parameterSubstitution_templateBinding" memberEnd="_k0RONO39Ee6g0P-x8MVPJg _k0ROWu39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGa-39Ee6g0P-x8MVPJg" name="A_templateBinding_boundElement" memberEnd="_k0ROGe39Ee6g0P-x8MVPJg _k0ROMu39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGbO39Ee6g0P-x8MVPJg" name="A_ownedTemplateSignature_template" memberEnd="_k0ROFu39Ee6g0P-x8MVPJg _k0RObO39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGbe39Ee6g0P-x8MVPJg" name="A_relatedElement_relationship" isDerived="true" memberEnd="_k0ROEO39Ee6g0P-x8MVPJg _k0WGbu39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGbu39Ee6g0P-x8MVPJg" name="relationship" type="Relationship" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_k0WGbe39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGb-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0WGcO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGce39Ee6g0P-x8MVPJg" name="A_importedPackage_packageImport" memberEnd="_k0RN8O39Ee6g0P-x8MVPJg _k0WGcu39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGcu39Ee6g0P-x8MVPJg" name="packageImport" type="_k0RN6u39Ee6g0P-x8MVPJg" subsettedProperty="_k0WGmO39Ee6g0P-x8MVPJg" association="_k0WGce39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGc-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0WGdO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGde39Ee6g0P-x8MVPJg" name="A_elementImport_importingNamespace" memberEnd="_k0PYtO39Ee6g0P-x8MVPJg _k0Kgae39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGdu39Ee6g0P-x8MVPJg" name="A_ownedMember_namespace" isDerived="true" memberEnd="_k0PYwO39Ee6g0P-x8MVPJg _k0Kg3-39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGd-39Ee6g0P-x8MVPJg" name="A_ownedRule_context" memberEnd="_k0PYxO39Ee6g0P-x8MVPJg _k0JSIO39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGeO39Ee6g0P-x8MVPJg" name="A_packageImport_importingNamespace" memberEnd="_k0PYyO39Ee6g0P-x8MVPJg _k0RN8u39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGee39Ee6g0P-x8MVPJg" name="A_member_memberNamespace" isDerived="true" memberEnd="_k0PYvO39Ee6g0P-x8MVPJg _k0WGeu39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGeu39Ee6g0P-x8MVPJg" name="memberNamespace" type="Namespace" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_k0WGee39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGe-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0WGfO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGfe39Ee6g0P-x8MVPJg" name="A_importedMember_namespace" isDerived="true" memberEnd="_k0PYuO39Ee6g0P-x8MVPJg _k0WGfu39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGfu39Ee6g0P-x8MVPJg" name="namespace" type="Namespace" subsettedProperty="_k0WGeu39Ee6g0P-x8MVPJg" association="_k0WGfe39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGf-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0WGgO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGge39Ee6g0P-x8MVPJg" name="A_nameExpression_namedElement" memberEnd="_k0Kg3O39Ee6g0P-x8MVPJg _k0WGgu39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGgu39Ee6g0P-x8MVPJg" name="namedElement" type="NamedElement" subsettedProperty="Element-owner" association="_k0WGge39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGg-39Ee6g0P-x8MVPJg"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGhO39Ee6g0P-x8MVPJg" name="A_clientDependency_client" memberEnd="_k0Kg1e39Ee6g0P-x8MVPJg _k0KgMe39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGhe39Ee6g0P-x8MVPJg" name="A_lowerValue_owningLower" memberEnd="_k0KgkO39Ee6g0P-x8MVPJg _k0WGhu39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGhu39Ee6g0P-x8MVPJg" name="owningLower" type="_k0Kgc-39Ee6g0P-x8MVPJg" subsettedProperty="Element-owner" association="_k0WGhe39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGh-39Ee6g0P-x8MVPJg"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGiO39Ee6g0P-x8MVPJg" name="A_upperValue_owningUpper" memberEnd="_k0Kgle39Ee6g0P-x8MVPJg _k0WGie39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGie39Ee6g0P-x8MVPJg" name="owningUpper" type="_k0Kgc-39Ee6g0P-x8MVPJg" subsettedProperty="Element-owner" association="_k0WGiO39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGiu39Ee6g0P-x8MVPJg"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGi-39Ee6g0P-x8MVPJg" name="A_importedElement_import" memberEnd="_k0KgZ-39Ee6g0P-x8MVPJg _k0WGjO39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGjO39Ee6g0P-x8MVPJg" name="import" type="_k0KgW-39Ee6g0P-x8MVPJg" subsettedProperty="_k0WGmO39Ee6g0P-x8MVPJg" association="_k0WGi-39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGje39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0WGju39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGj-39Ee6g0P-x8MVPJg" name="A_ownedElement_owner" isDerived="true" memberEnd="_k0KgSu39Ee6g0P-x8MVPJg Element-owner"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGkO39Ee6g0P-x8MVPJg" name="A_ownedComment_owningElement" memberEnd="_k0KgRu39Ee6g0P-x8MVPJg _k0WGke39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGke39Ee6g0P-x8MVPJg" name="owningElement" type="Element" subsettedProperty="Element-owner" association="_k0WGkO39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGku39Ee6g0P-x8MVPJg"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGk-39Ee6g0P-x8MVPJg" name="A_source_directedRelationship" isDerived="true" memberEnd="_k0KgOe39Ee6g0P-x8MVPJg _k0WGlO39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGlO39Ee6g0P-x8MVPJg" name="directedRelationship" type="DirectedRelationship" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_k0WGbu39Ee6g0P-x8MVPJg" association="_k0WGk-39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGle39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0WGlu39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGl-39Ee6g0P-x8MVPJg" name="A_target_directedRelationship" isDerived="true" memberEnd="_k0KgPO39Ee6g0P-x8MVPJg _k0WGmO39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGmO39Ee6g0P-x8MVPJg" name="directedRelationship" type="DirectedRelationship" isReadOnly="true" isDerived="true" isDerivedUnion="true" subsettedProperty="_k0WGbu39Ee6g0P-x8MVPJg" association="_k0WGl-39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGme39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0WGmu39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGm-39Ee6g0P-x8MVPJg" name="A_supplier_supplierDependency" memberEnd="_k0KgNO39Ee6g0P-x8MVPJg _k0WGnO39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGnO39Ee6g0P-x8MVPJg" name="supplierDependency" type="Dependency" subsettedProperty="_k0WGmO39Ee6g0P-x8MVPJg" association="_k0WGm-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0WGne39Ee6g0P-x8MVPJg" annotatedElement="_k0WGnO39Ee6g0P-x8MVPJg">
          <body>Indicates the dependencies that reference the supplier.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGnu39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0WGn-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGoO39Ee6g0P-x8MVPJg" name="A_constrainedElement_constraint" memberEnd="_k0JSHO39Ee6g0P-x8MVPJg _k0WGoe39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGoe39Ee6g0P-x8MVPJg" name="constraint" type="_k0JSEO39Ee6g0P-x8MVPJg" association="_k0WGoO39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGou39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0WGo-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGpO39Ee6g0P-x8MVPJg" name="A_specification_owningConstraint" memberEnd="_k0JSI-39Ee6g0P-x8MVPJg _k0WGpe39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGpe39Ee6g0P-x8MVPJg" name="owningConstraint" type="_k0JSEO39Ee6g0P-x8MVPJg" subsettedProperty="Element-owner" association="_k0WGpO39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGpu39Ee6g0P-x8MVPJg"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGp-39Ee6g0P-x8MVPJg" name="A_annotatedElement_comment" memberEnd="_k0G17-39Ee6g0P-x8MVPJg _k0WGqO39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGqO39Ee6g0P-x8MVPJg" name="comment" type="Comment" association="_k0WGp-39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGqe39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0WGqu39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0WGq-39Ee6g0P-x8MVPJg" name="A_mapping_abstraction" memberEnd="_k0G16u39Ee6g0P-x8MVPJg _k0WGrO39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0WGrO39Ee6g0P-x8MVPJg" name="abstraction" type="_k0G15-39Ee6g0P-x8MVPJg" subsettedProperty="Element-owner" association="_k0WGq-39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0WGre39Ee6g0P-x8MVPJg"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0WGsO39Ee6g0P-x8MVPJg" name="Extension">
      <ownedComment xmi:id="_k0WGse39Ee6g0P-x8MVPJg" annotatedElement="_k0WGsO39Ee6g0P-x8MVPJg">
        <body>An extension is used to indicate that the properties of a metaclass are extended through a stereotype, and gives the ability to flexibly add (and later remove) stereotypes to classes.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0WGsu39Ee6g0P-x8MVPJg" name="non_owned_end" constrainedElement="_k0WGsO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0WGs-39Ee6g0P-x8MVPJg" annotatedElement="_k0WGsu39Ee6g0P-x8MVPJg">
          <body>The non-owned end of an Extension is typed by a Class.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0WGtO39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0WGte39Ee6g0P-x8MVPJg" name="is_binary" constrainedElement="_k0WGsO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0WGtu39Ee6g0P-x8MVPJg" annotatedElement="_k0WGte39Ee6g0P-x8MVPJg">
          <body>An Extension is binary, i.e., it has only two memberEnds.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0WGt-39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>memberEnd->size() = 2</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0WGuO39Ee6g0P-x8MVPJg">
        <general xmi:type="uml:Class" href="uml-2.5.1/UML.uml#Association"/>
      </generalization>
      <ownedAttribute xmi:id="_k0WGue39Ee6g0P-x8MVPJg" name="isRequired" isReadOnly="true" isDerived="true">
        <ownedComment xmi:id="_k0WGuu39Ee6g0P-x8MVPJg" annotatedElement="_k0WGue39Ee6g0P-x8MVPJg">
          <body>Indicates whether an instance of the extending stereotype must be created when an instance of the extended class is created. The attribute value is derived from the value of the lower property of the ExtensionEnd referenced by Extension::ownedEnd; a lower value of 1 means that isRequired is true, but otherwise it is false. Since the default value of ExtensionEnd::lower is 0, the default value of isRequired is false.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0WGu-39Ee6g0P-x8MVPJg" name="metaclass" isReadOnly="true" isDerived="true">
        <ownedComment xmi:id="_k0WGvO39Ee6g0P-x8MVPJg" annotatedElement="_k0WGu-39Ee6g0P-x8MVPJg">
          <body>References the Class that is extended through an Extension. The property is derived from the type of the memberEnd that is not the ownedEnd.</body>
        </ownedComment>
        <type xmi:type="uml:Class" href="uml-2.5.1/UML.uml#Class"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0WGve39Ee6g0P-x8MVPJg" name="ownedEnd" type="_k0bl8O39Ee6g0P-x8MVPJg" aggregation="composite" association="_k0hsmO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0WGvu39Ee6g0P-x8MVPJg" annotatedElement="_k0WGve39Ee6g0P-x8MVPJg">
          <body>References the end of the extension that is typed by a Stereotype.</body>
        </ownedComment>
        <redefinedProperty href="uml-2.5.1/UML.uml#Association-ownedEnd"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_k0WGv-39Ee6g0P-x8MVPJg" name="isRequired" bodyCondition="_k0WGwe39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0WGwO39Ee6g0P-x8MVPJg" annotatedElement="_k0WGv-39Ee6g0P-x8MVPJg">
          <body>The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0WGwe39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0WGv-39Ee6g0P-x8MVPJg _k0WGue39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0WGwu39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (ownedEnd.lowerBound() = 1)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0WGw-39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0WGxO39Ee6g0P-x8MVPJg" name="metaclass" bodyCondition="_k0WGxu39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0WGxe39Ee6g0P-x8MVPJg" annotatedElement="_k0WGxO39Ee6g0P-x8MVPJg">
          <body>The query metaclass() returns the metaclass that is being extended (as opposed to the extending stereotype).</body>
        </ownedComment>
        <ownedRule xmi:id="_k0WGxu39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0WGxO39Ee6g0P-x8MVPJg _k0WGu-39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0WGx-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (metaclassEnd().type.oclAsType(Class))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0WGyO39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:Class" href="uml-2.5.1/UML.uml#Class"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0WGye39Ee6g0P-x8MVPJg" name="metaclassEnd" bodyCondition="_k0WGy-39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0WGyu39Ee6g0P-x8MVPJg" annotatedElement="_k0WGye39Ee6g0P-x8MVPJg">
          <body>The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype).</body>
        </ownedComment>
        <ownedRule xmi:id="_k0WGy-39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0WGye39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0WGzO39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (memberEnd->reject(p | ownedEnd->includes(p.oclAsType(ExtensionEnd)))->any(true))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0WGze39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:Class" href="uml-2.5.1/UML.uml#Property"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0bl8O39Ee6g0P-x8MVPJg" name="ExtensionEnd">
      <ownedComment xmi:id="_k0bl8e39Ee6g0P-x8MVPJg" annotatedElement="_k0bl8O39Ee6g0P-x8MVPJg">
        <body>An extension end is used to tie an extension to a stereotype when extending a metaclass.
The default multiplicity of an extension end is 0..1.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0bl8u39Ee6g0P-x8MVPJg" name="multiplicity" constrainedElement="_k0bl8O39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0bl8-39Ee6g0P-x8MVPJg" annotatedElement="_k0bl8u39Ee6g0P-x8MVPJg">
          <body>The multiplicity of ExtensionEnd is 0..1 or 1.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0bl9O39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>(lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0bl9e39Ee6g0P-x8MVPJg" name="aggregation" constrainedElement="_k0bl8O39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0bl9u39Ee6g0P-x8MVPJg" annotatedElement="_k0bl9e39Ee6g0P-x8MVPJg">
          <body>The aggregation of an ExtensionEnd is composite.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0bl9-39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>self.aggregation = AggregationKind::composite</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0bl-O39Ee6g0P-x8MVPJg">
        <general xmi:type="uml:Class" href="uml-2.5.1/UML.uml#Property"/>
      </generalization>
      <ownedAttribute xmi:id="_k0bl-e39Ee6g0P-x8MVPJg" name="lower" isDerived="true" redefinedProperty="_k0Kgju39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0bl-u39Ee6g0P-x8MVPJg" annotatedElement="_k0bl-e39Ee6g0P-x8MVPJg">
          <body>This redefinition changes the default multiplicity of association ends, since model elements are usually extended by 0 or 1 instance of the extension stereotype.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0bl--39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0bl_O39Ee6g0P-x8MVPJg" name="type" type="_k0c0je39Ee6g0P-x8MVPJg" redefinedProperty="_k0ROfe39Ee6g0P-x8MVPJg" association="_k0hslO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0bl_e39Ee6g0P-x8MVPJg" annotatedElement="_k0bl_O39Ee6g0P-x8MVPJg">
          <body>References the type of the ExtensionEnd. Note that this association restricts the possible types of an ExtensionEnd to only be Stereotypes.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:id="_k0bl_u39Ee6g0P-x8MVPJg" name="lowerBound" bodyCondition="_k0bmAO39Ee6g0P-x8MVPJg" isQuery="true" redefinedOperation="_k0Kguu39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0bl_-39Ee6g0P-x8MVPJg" annotatedElement="_k0bl_u39Ee6g0P-x8MVPJg">
          <body>The query lowerBound() returns the lower bound of the multiplicity as an Integer. This is a redefinition of the default lower bound, which normally, for MultiplicityElements, evaluates to 1 if empty.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0bmAO39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0bl_u39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0bmAe39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (if lowerValue=null then 0 else lowerValue.integerValue() endif)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0bmAu39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0bmA-39Ee6g0P-x8MVPJg"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0bmBO39Ee6g0P-x8MVPJg" name="Image">
      <ownedComment xmi:id="_k0bmBe39Ee6g0P-x8MVPJg" annotatedElement="_k0bmBO39Ee6g0P-x8MVPJg">
        <body>Physical definition of a graphical image.</body>
      </ownedComment>
      <generalization xmi:id="_k0bmBu39Ee6g0P-x8MVPJg" general="Element"/>
      <ownedAttribute xmi:id="_k0bmB-39Ee6g0P-x8MVPJg" name="content">
        <ownedComment xmi:id="_k0bmCO39Ee6g0P-x8MVPJg" annotatedElement="_k0bmB-39Ee6g0P-x8MVPJg">
          <body>This contains the serialization of the image according to the format. The value could represent a bitmap, image such as a GIF file, or drawing 'instructions' using a standard such as Scalable Vector Graphic (SVG) (which is XML based).</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0bmCe39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0bmCu39Ee6g0P-x8MVPJg" name="format">
        <ownedComment xmi:id="_k0bmC-39Ee6g0P-x8MVPJg" annotatedElement="_k0bmCu39Ee6g0P-x8MVPJg">
          <body>This indicates the format of the content, which is how the string content should be interpreted. The following values are reserved: SVG, GIF, PNG, JPG, WMF, EMF, BMP. In addition the prefix 'MIME: ' is also reserved. This option can be used as an alternative to express the reserved values above, for example &quot;SVG&quot; could instead be expressed as &quot;MIME: image/svg+xml&quot;.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0bmDO39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0bmDe39Ee6g0P-x8MVPJg" name="location">
        <ownedComment xmi:id="_k0bmDu39Ee6g0P-x8MVPJg" annotatedElement="_k0bmDe39Ee6g0P-x8MVPJg">
          <body>This contains a location that can be used by a tool to locate the image as an alternative to embedding it in the stereotype.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0bmD-39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Model" name="Model">
      <ownedComment xmi:id="_k0bmEO39Ee6g0P-x8MVPJg" annotatedElement="Model">
        <body>A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. This purpose determines what is to be included in the model and what is irrelevant. Thus the model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail.</body>
      </ownedComment>
      <generalization xmi:id="_k0bmEe39Ee6g0P-x8MVPJg" general="Package"/>
      <ownedAttribute xmi:id="_k0bmEu39Ee6g0P-x8MVPJg" name="viewpoint">
        <ownedComment xmi:id="_k0bmE-39Ee6g0P-x8MVPJg" annotatedElement="_k0bmEu39Ee6g0P-x8MVPJg">
          <body>The name of the viewpoint that is expressed by a model (this name may refer to a profile definition).</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0bmFO39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Package" name="Package">
      <ownedComment xmi:id="_k0c0EO39Ee6g0P-x8MVPJg" annotatedElement="Package">
        <body>A package can have one or more profile applications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles.
Package specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter.
A package is used to group elements, and provides a namespace for the grouped elements.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0c0Ee39Ee6g0P-x8MVPJg" name="elements_public_or_private" constrainedElement="Package">
        <ownedComment xmi:id="_k0c0Eu39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Ee39Ee6g0P-x8MVPJg">
          <body>If an element that is owned by a package has visibility, it is public or private.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0E-39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>packagedElement->forAll(e | e.visibility&lt;> null implies e.visibility = VisibilityKind::public or e.visibility = VisibilityKind::private)</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0c0FO39Ee6g0P-x8MVPJg" general="PackageableElement"/>
      <generalization xmi:id="_k0c0Fe39Ee6g0P-x8MVPJg" general="_k0ROE-39Ee6g0P-x8MVPJg"/>
      <generalization xmi:id="_k0c0Fu39Ee6g0P-x8MVPJg" general="Namespace"/>
      <ownedAttribute xmi:id="_k0c0F-39Ee6g0P-x8MVPJg" name="URI">
        <ownedComment xmi:id="_k0c0GO39Ee6g0P-x8MVPJg" annotatedElement="_k0c0F-39Ee6g0P-x8MVPJg">
          <body>Provides an identifier for the package that can be used for many purposes. A URI is the universally unique identification of the package following the IETF URI specification, RFC 2396 http://www.ietf.org/rfc/rfc2396.txt and it must comply with those syntax rules.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0Ge39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0c0Gu39Ee6g0P-x8MVPJg" name="nestedPackage" type="Package" aggregation="composite" isDerived="true" subsettedProperty="_k0c0Le39Ee6g0P-x8MVPJg" association="_k0hFle39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0G-39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Gu39Ee6g0P-x8MVPJg">
          <body>References the packaged elements that are Packages.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0HO39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0He39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0c0Hu39Ee6g0P-x8MVPJg" name="nestingPackage" type="Package" subsettedProperty="_k0hFku39Ee6g0P-x8MVPJg" association="_k0hFle39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0H-39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Hu39Ee6g0P-x8MVPJg">
          <body>References the Package that owns this Package.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0IO39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0c0Ie39Ee6g0P-x8MVPJg" name="ownedStereotype" type="_k0c0je39Ee6g0P-x8MVPJg" isReadOnly="true" aggregation="composite" isDerived="true" subsettedProperty="_k0c0Le39Ee6g0P-x8MVPJg" association="_k0hske39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0Iu39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Ie39Ee6g0P-x8MVPJg">
          <body>References the Stereotypes that are owned by the Package.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0I-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0JO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0c0Je39Ee6g0P-x8MVPJg" name="ownedType" type="_k0RObu39Ee6g0P-x8MVPJg" aggregation="composite" isDerived="true" subsettedProperty="_k0c0Le39Ee6g0P-x8MVPJg" association="_k0hskO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0Ju39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Je39Ee6g0P-x8MVPJg">
          <body>References the packaged elements that are Types.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0J-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0KO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0c0Ke39Ee6g0P-x8MVPJg" name="packageMerge" type="_k0c0a-39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0WGlO39Ee6g0P-x8MVPJg _k0KgSu39Ee6g0P-x8MVPJg" association="_k0hFlO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0Ku39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Ke39Ee6g0P-x8MVPJg">
          <body>References the PackageMerges that are owned by this Package.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0K-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0LO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0c0Le39Ee6g0P-x8MVPJg" name="packagedElement" type="PackageableElement" aggregation="composite" subsettedProperty="_k0PYwO39Ee6g0P-x8MVPJg" association="_k0hFke39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0Lu39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Le39Ee6g0P-x8MVPJg">
          <body>Specifies the packageable elements that are owned by this Package.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0L-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0MO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0c0Me39Ee6g0P-x8MVPJg" name="profileApplication" type="_k0c0g-39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0WGlO39Ee6g0P-x8MVPJg _k0KgSu39Ee6g0P-x8MVPJg" association="_k0hFlu39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0Mu39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Me39Ee6g0P-x8MVPJg">
          <body>References the ProfileApplications that indicate which profiles have been applied to the Package.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0M-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0NO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_k0c0Ne39Ee6g0P-x8MVPJg" name="allApplicableStereotypes" bodyCondition="_k0c0N-39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0c0Nu39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Ne39Ee6g0P-x8MVPJg">
          <body>The query allApplicableStereotypes() returns all the directly or indirectly owned stereotypes, including stereotypes contained in sub-profiles.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0c0N-39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0c0Ne39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0OO39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (let ownedPackages : Bag(Package) = ownedMember->select(oclIsKindOf(Package))->collect(oclAsType(Package)) in&#xD;
 ownedStereotype->union(ownedPackages.allApplicableStereotypes())->flatten()->asSet()&#xD;
)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0c0Oe39Ee6g0P-x8MVPJg" name="result" type="_k0c0je39Ee6g0P-x8MVPJg" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0Ou39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0O-39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0c0PO39Ee6g0P-x8MVPJg" name="containingProfile" bodyCondition="_k0c0Pu39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0c0Pe39Ee6g0P-x8MVPJg" annotatedElement="_k0c0PO39Ee6g0P-x8MVPJg">
          <body>The query containingProfile() returns the closest profile directly or indirectly containing this package (or this package itself, if it is a profile).</body>
        </ownedComment>
        <ownedRule xmi:id="_k0c0Pu39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0c0PO39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0P-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (if self.oclIsKindOf(Profile) then &#xD;
	self.oclAsType(Profile)&#xD;
else&#xD;
	self.namespace.oclAsType(Package).containingProfile()&#xD;
endif)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0c0QO39Ee6g0P-x8MVPJg" name="result" type="_k0c0cu39Ee6g0P-x8MVPJg" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0Qe39Ee6g0P-x8MVPJg"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0c0Qu39Ee6g0P-x8MVPJg" name="makesVisible" bodyCondition="_k0c0Ru39Ee6g0P-x8MVPJg" isQuery="true" precondition="_k0c0RO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0Q-39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Qu39Ee6g0P-x8MVPJg">
          <body>The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0c0RO39Ee6g0P-x8MVPJg" name="pre" constrainedElement="_k0c0Qu39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0Re39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>member->includes(el)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_k0c0Ru39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0c0Qu39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0R-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (ownedMember->includes(el) or
(elementImport->select(ei|ei.importedElement = VisibilityKind::public)->collect(importedElement.oclAsType(NamedElement))->includes(el)) or
(packageImport->select(visibility = VisibilityKind::public)->collect(importedPackage.member->includes(el))->notEmpty()))</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0c0SO39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_k0c0Se39Ee6g0P-x8MVPJg" name="el" type="NamedElement"/>
      </ownedOperation>
      <ownedOperation xmi:id="_k0c0Su39Ee6g0P-x8MVPJg" name="mustBeOwned" bodyCondition="_k0c0TO39Ee6g0P-x8MVPJg" isQuery="true" redefinedOperation="_k0KgVu39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0S-39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Su39Ee6g0P-x8MVPJg">
          <body>The query mustBeOwned() indicates whether elements of this type must have an owner.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0c0TO39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0c0Su39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0Te39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (false)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0c0Tu39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0c0T-39Ee6g0P-x8MVPJg" name="nestedPackage" bodyCondition="_k0c0Ue39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0c0UO39Ee6g0P-x8MVPJg" annotatedElement="_k0c0T-39Ee6g0P-x8MVPJg">
          <body>Derivation for Package::/nestedPackage</body>
        </ownedComment>
        <ownedRule xmi:id="_k0c0Ue39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0c0T-39Ee6g0P-x8MVPJg _k0c0Gu39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0Uu39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (packagedElement->select(oclIsKindOf(Package))->collect(oclAsType(Package))->asSet())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0c0U-39Ee6g0P-x8MVPJg" name="result" type="Package" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0VO39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0Ve39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0c0Vu39Ee6g0P-x8MVPJg" name="ownedStereotype" bodyCondition="_k0c0WO39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0c0V-39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Vu39Ee6g0P-x8MVPJg">
          <body>Derivation for Package::/ownedStereotype</body>
        </ownedComment>
        <ownedRule xmi:id="_k0c0WO39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0c0Vu39Ee6g0P-x8MVPJg _k0c0Ie39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0We39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (packagedElement->select(oclIsKindOf(Stereotype))->collect(oclAsType(Stereotype))->asSet())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0c0Wu39Ee6g0P-x8MVPJg" name="result" type="_k0c0je39Ee6g0P-x8MVPJg" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0W-39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0XO39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0c0Xe39Ee6g0P-x8MVPJg" name="ownedType" bodyCondition="_k0c0X-39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0c0Xu39Ee6g0P-x8MVPJg" annotatedElement="_k0c0Xe39Ee6g0P-x8MVPJg">
          <body>Derivation for Package::/ownedType</body>
        </ownedComment>
        <ownedRule xmi:id="_k0c0X-39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0c0Xe39Ee6g0P-x8MVPJg _k0c0Je39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0YO39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (packagedElement->select(oclIsKindOf(Type))->collect(oclAsType(Type))->asSet())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0c0Ye39Ee6g0P-x8MVPJg" name="result" type="_k0RObu39Ee6g0P-x8MVPJg" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0Yu39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0Y-39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0c0ZO39Ee6g0P-x8MVPJg" name="visibleMembers" bodyCondition="_k0c0Zu39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0c0Ze39Ee6g0P-x8MVPJg" annotatedElement="_k0c0ZO39Ee6g0P-x8MVPJg">
          <body>The query visibleMembers() defines which members of a Package can be accessed outside it.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0c0Zu39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0c0ZO39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0Z-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (member->select( m | m.oclIsKindOf(PackageableElement) and self.makesVisible(m))->collect(oclAsType(PackageableElement))->asSet())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0c0aO39Ee6g0P-x8MVPJg" name="result" type="PackageableElement" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0ae39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0au39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0c0a-39Ee6g0P-x8MVPJg" name="PackageMerge">
      <ownedComment xmi:id="_k0c0bO39Ee6g0P-x8MVPJg" annotatedElement="_k0c0a-39Ee6g0P-x8MVPJg">
        <body>A package merge defines how the contents of one package are extended by the contents of another package.</body>
      </ownedComment>
      <generalization xmi:id="_k0c0be39Ee6g0P-x8MVPJg" general="DirectedRelationship"/>
      <ownedAttribute xmi:id="_k0c0bu39Ee6g0P-x8MVPJg" name="mergedPackage" type="Package" subsettedProperty="_k0KgPO39Ee6g0P-x8MVPJg" association="_k0hFje39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0b-39Ee6g0P-x8MVPJg" annotatedElement="_k0c0bu39Ee6g0P-x8MVPJg">
          <body>References the Package that is to be merged with the receiving package of the PackageMerge.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0c0cO39Ee6g0P-x8MVPJg" name="receivingPackage" type="Package" subsettedProperty="_k0KgOe39Ee6g0P-x8MVPJg Element-owner" association="_k0hFlO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0ce39Ee6g0P-x8MVPJg" annotatedElement="_k0c0cO39Ee6g0P-x8MVPJg">
          <body>References the Package that is being extended with the contents of the merged package of the PackageMerge.</body>
        </ownedComment>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0c0cu39Ee6g0P-x8MVPJg" name="Profile">
      <ownedComment xmi:id="_k0c0c-39Ee6g0P-x8MVPJg" annotatedElement="_k0c0cu39Ee6g0P-x8MVPJg">
        <body>A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0c0dO39Ee6g0P-x8MVPJg" name="metaclass_reference_not_specialized" constrainedElement="_k0c0cu39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0de39Ee6g0P-x8MVPJg" annotatedElement="_k0c0dO39Ee6g0P-x8MVPJg">
          <body>An element imported as a metaclassReference is not specialized or generalized in a Profile.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0du39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>metaclassReference.importedElement->&#xD;
	select(c | c.oclIsKindOf(Classifier) and&#xD;
		(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()&#xD;
and &#xD;
packagedElement->&#xD;
    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->&#xD;
       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0c0d-39Ee6g0P-x8MVPJg" name="references_same_metamodel" constrainedElement="_k0c0cu39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0eO39Ee6g0P-x8MVPJg" annotatedElement="_k0c0d-39Ee6g0P-x8MVPJg">
          <body>All elements imported either as metaclassReferences or through metamodelReferences are members of the same base reference metamodel.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0ee39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->&#xD;
  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()</body>
        </specification>
      </ownedRule>
      <generalization xmi:id="_k0c0eu39Ee6g0P-x8MVPJg" general="Package"/>
      <ownedAttribute xmi:id="_k0c0e-39Ee6g0P-x8MVPJg" name="metaclassReference" type="_k0KgW-39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0PYtO39Ee6g0P-x8MVPJg" association="_k0hFh-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0fO39Ee6g0P-x8MVPJg" annotatedElement="_k0c0e-39Ee6g0P-x8MVPJg">
          <body>References a metaclass that may be extended.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0fe39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0fu39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0c0f-39Ee6g0P-x8MVPJg" name="metamodelReference" type="_k0RN6u39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0PYyO39Ee6g0P-x8MVPJg" association="_k0hFiu39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0gO39Ee6g0P-x8MVPJg" annotatedElement="_k0c0f-39Ee6g0P-x8MVPJg">
          <body>References a package containing (directly or indirectly) metaclasses that may be extended.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0ge39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0gu39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0c0g-39Ee6g0P-x8MVPJg" name="ProfileApplication">
      <ownedComment xmi:id="_k0c0hO39Ee6g0P-x8MVPJg" annotatedElement="_k0c0g-39Ee6g0P-x8MVPJg">
        <body>A profile application is used to show which profiles have been applied to a package.</body>
      </ownedComment>
      <generalization xmi:id="_k0c0he39Ee6g0P-x8MVPJg" general="DirectedRelationship"/>
      <ownedAttribute xmi:id="_k0c0hu39Ee6g0P-x8MVPJg" name="appliedProfile" type="_k0c0cu39Ee6g0P-x8MVPJg" subsettedProperty="_k0KgPO39Ee6g0P-x8MVPJg" association="_k0hFg-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0h-39Ee6g0P-x8MVPJg" annotatedElement="_k0c0hu39Ee6g0P-x8MVPJg">
          <body>References the Profiles that are applied to a Package through this ProfileApplication.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0c0iO39Ee6g0P-x8MVPJg" name="applyingPackage" type="Package" subsettedProperty="_k0KgOe39Ee6g0P-x8MVPJg Element-owner" association="_k0hFlu39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0ie39Ee6g0P-x8MVPJg" annotatedElement="_k0c0iO39Ee6g0P-x8MVPJg">
          <body>The package that owns the profile application.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0c0iu39Ee6g0P-x8MVPJg" name="isStrict">
        <ownedComment xmi:id="_k0c0i-39Ee6g0P-x8MVPJg" annotatedElement="_k0c0iu39Ee6g0P-x8MVPJg">
          <body>Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.</body>
        </ownedComment>
        <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_k0c0jO39Ee6g0P-x8MVPJg"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_k0c0je39Ee6g0P-x8MVPJg" name="Stereotype">
      <ownedComment xmi:id="_k0c0ju39Ee6g0P-x8MVPJg" annotatedElement="_k0c0je39Ee6g0P-x8MVPJg">
        <body>A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0c0j-39Ee6g0P-x8MVPJg" name="binaryAssociationsOnly" constrainedElement="_k0c0je39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0kO39Ee6g0P-x8MVPJg" annotatedElement="_k0c0j-39Ee6g0P-x8MVPJg">
          <body>Stereotypes may only participate in binary associations.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0ke39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>ownedAttribute.association->forAll(memberEnd->size()=2)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0c0ku39Ee6g0P-x8MVPJg" name="generalize" constrainedElement="_k0c0je39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0k-39Ee6g0P-x8MVPJg" annotatedElement="_k0c0ku39Ee6g0P-x8MVPJg">
          <body>A Stereotype may only generalize or specialize another Stereotype.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0lO39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>allParents()->forAll(oclIsKindOf(Stereotype)) &#xD;
and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0c0le39Ee6g0P-x8MVPJg" name="name_not_clash" constrainedElement="_k0c0je39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0lu39Ee6g0P-x8MVPJg" annotatedElement="_k0c0le39Ee6g0P-x8MVPJg">
          <body>Stereotype names should not clash with keyword names for the extended model element.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0l-39Ee6g0P-x8MVPJg" language=""/>
      </ownedRule>
      <ownedRule xmi:id="_k0c0mO39Ee6g0P-x8MVPJg" name="associationEndOwnership" constrainedElement="_k0c0je39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0me39Ee6g0P-x8MVPJg" annotatedElement="_k0c0mO39Ee6g0P-x8MVPJg">
          <body>Where a stereotype’s property is an association end for an association other than a kind of extension, and the other end is not a stereotype, the other end must be owned by the association itself.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0mu39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>ownedAttribute&#xD;
->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))&#xD;
->forAll(opposite.owner = association)</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0c0m-39Ee6g0P-x8MVPJg" name="base_property_upper_bound" constrainedElement="_k0c0je39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0nO39Ee6g0P-x8MVPJg" annotatedElement="_k0c0m-39Ee6g0P-x8MVPJg">
          <body>The upper bound of base-properties is exactly 1.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0ne39Ee6g0P-x8MVPJg" language=""/>
      </ownedRule>
      <ownedRule xmi:id="_k0c0nu39Ee6g0P-x8MVPJg" name="base_property_multiplicity_single_extension" constrainedElement="_k0c0je39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0n-39Ee6g0P-x8MVPJg" annotatedElement="_k0c0nu39Ee6g0P-x8MVPJg">
          <body>If a Stereotype extends only one metaclass, the multiplicity of the corresponding base-property shall be 1..1.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0oO39Ee6g0P-x8MVPJg"/>
      </ownedRule>
      <ownedRule xmi:id="_k0c0oe39Ee6g0P-x8MVPJg" name="base_property_multiplicity_multiple_extension" constrainedElement="_k0c0je39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0ou39Ee6g0P-x8MVPJg" annotatedElement="_k0c0oe39Ee6g0P-x8MVPJg">
          <body>If a Stereotype extends more than one metaclass, the multiplicity of the corresponding base-properties shall be [0..1]. At any point in time, only one of these base-properties can contain a metaclass instance during runtime.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0o-39Ee6g0P-x8MVPJg"/>
      </ownedRule>
      <generalization xmi:id="_k0c0pO39Ee6g0P-x8MVPJg">
        <general xmi:type="uml:Class" href="uml-2.5.1/UML.uml#Class"/>
      </generalization>
      <ownedAttribute xmi:id="_k0c0pe39Ee6g0P-x8MVPJg" name="icon" type="_k0bmBO39Ee6g0P-x8MVPJg" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg" association="_k0hFgO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0pu39Ee6g0P-x8MVPJg" annotatedElement="_k0c0pe39Ee6g0P-x8MVPJg">
          <body>Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0p-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0qO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0c0qe39Ee6g0P-x8MVPJg" name="profile" type="_k0c0cu39Ee6g0P-x8MVPJg" isReadOnly="true" isDerived="true" association="_k0c0te39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0c0qu39Ee6g0P-x8MVPJg" annotatedElement="_k0c0qe39Ee6g0P-x8MVPJg">
          <body>The profile that directly or indirectly contains this stereotype.</body>
        </ownedComment>
      </ownedAttribute>
      <ownedOperation xmi:id="_k0c0q-39Ee6g0P-x8MVPJg" name="containingProfile" bodyCondition="_k0c0re39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0c0rO39Ee6g0P-x8MVPJg" annotatedElement="_k0c0q-39Ee6g0P-x8MVPJg">
          <body>The query containingProfile returns the closest profile directly or indirectly containing this stereotype.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0c0re39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0c0q-39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0ru39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (self.namespace.oclAsType(Package).containingProfile())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0c0r-39Ee6g0P-x8MVPJg" name="result" type="_k0c0cu39Ee6g0P-x8MVPJg" direction="return"/>
      </ownedOperation>
      <ownedOperation xmi:id="_k0c0sO39Ee6g0P-x8MVPJg" name="profile" bodyCondition="_k0c0su39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0c0se39Ee6g0P-x8MVPJg" annotatedElement="_k0c0sO39Ee6g0P-x8MVPJg">
          <body>A stereotype must be contained, directly or indirectly, in a profile.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0c0su39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0c0sO39Ee6g0P-x8MVPJg _k0c0qe39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0c0s-39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (self.containingProfile())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0c0tO39Ee6g0P-x8MVPJg" name="result" type="_k0c0cu39Ee6g0P-x8MVPJg" direction="return"/>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0c0te39Ee6g0P-x8MVPJg" name="A_profile_stereotype" isDerived="true" memberEnd="_k0c0qe39Ee6g0P-x8MVPJg _k0c0tu39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0c0tu39Ee6g0P-x8MVPJg" name="stereotype" type="_k0c0je39Ee6g0P-x8MVPJg" association="_k0c0te39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0c0t-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0c0uO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hFgO39Ee6g0P-x8MVPJg" name="A_icon_stereotype" memberEnd="_k0c0pe39Ee6g0P-x8MVPJg _k0hFge39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0hFge39Ee6g0P-x8MVPJg" name="stereotype" type="_k0c0je39Ee6g0P-x8MVPJg" subsettedProperty="Element-owner" association="_k0hFgO39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0hFgu39Ee6g0P-x8MVPJg"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hFg-39Ee6g0P-x8MVPJg" name="A_appliedProfile_profileApplication" memberEnd="_k0c0hu39Ee6g0P-x8MVPJg _k0hFhO39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0hFhO39Ee6g0P-x8MVPJg" name="profileApplication" type="_k0c0g-39Ee6g0P-x8MVPJg" subsettedProperty="_k0WGmO39Ee6g0P-x8MVPJg" association="_k0hFg-39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0hFhe39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0hFhu39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hFh-39Ee6g0P-x8MVPJg" name="A_metaclassReference_profile" memberEnd="_k0c0e-39Ee6g0P-x8MVPJg _k0hFiO39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0hFiO39Ee6g0P-x8MVPJg" name="profile" type="_k0c0cu39Ee6g0P-x8MVPJg" subsettedProperty="_k0Kgae39Ee6g0P-x8MVPJg" association="_k0hFh-39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0hFie39Ee6g0P-x8MVPJg"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hFiu39Ee6g0P-x8MVPJg" name="A_metamodelReference_profile" memberEnd="_k0c0f-39Ee6g0P-x8MVPJg _k0hFi-39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0hFi-39Ee6g0P-x8MVPJg" name="profile" type="_k0c0cu39Ee6g0P-x8MVPJg" subsettedProperty="_k0RN8u39Ee6g0P-x8MVPJg" association="_k0hFiu39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0hFjO39Ee6g0P-x8MVPJg"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hFje39Ee6g0P-x8MVPJg" name="A_mergedPackage_packageMerge" memberEnd="_k0c0bu39Ee6g0P-x8MVPJg _k0hFju39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0hFju39Ee6g0P-x8MVPJg" name="packageMerge" type="_k0c0a-39Ee6g0P-x8MVPJg" subsettedProperty="_k0WGmO39Ee6g0P-x8MVPJg" association="_k0hFje39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0hFj-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0hFkO39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hFke39Ee6g0P-x8MVPJg" name="A_packagedElement_owningPackage" memberEnd="_k0c0Le39Ee6g0P-x8MVPJg _k0hFku39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0hFku39Ee6g0P-x8MVPJg" name="owningPackage" type="Package" subsettedProperty="_k0Kg3-39Ee6g0P-x8MVPJg" association="_k0hFke39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0hFk-39Ee6g0P-x8MVPJg"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hFlO39Ee6g0P-x8MVPJg" name="A_packageMerge_receivingPackage" memberEnd="_k0c0Ke39Ee6g0P-x8MVPJg _k0c0cO39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hFle39Ee6g0P-x8MVPJg" name="A_nestedPackage_nestingPackage" memberEnd="_k0c0Gu39Ee6g0P-x8MVPJg _k0c0Hu39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hFlu39Ee6g0P-x8MVPJg" name="A_profileApplication_applyingPackage" memberEnd="_k0c0Me39Ee6g0P-x8MVPJg _k0c0iO39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hskO39Ee6g0P-x8MVPJg" name="A_ownedType_package" memberEnd="_k0c0Je39Ee6g0P-x8MVPJg _k0ROce39Ee6g0P-x8MVPJg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hske39Ee6g0P-x8MVPJg" name="A_ownedStereotype_owningPackage" isDerived="true" memberEnd="_k0c0Ie39Ee6g0P-x8MVPJg _k0hsk-39Ee6g0P-x8MVPJg">
      <generalization xmi:id="_k0hsku39Ee6g0P-x8MVPJg" general="_k0hFke39Ee6g0P-x8MVPJg"/>
      <ownedEnd xmi:id="_k0hsk-39Ee6g0P-x8MVPJg" name="owningPackage" type="Package" redefinedProperty="_k0hFku39Ee6g0P-x8MVPJg" association="_k0hske39Ee6g0P-x8MVPJg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hslO39Ee6g0P-x8MVPJg" name="A_type_extensionEnd" memberEnd="_k0bl_O39Ee6g0P-x8MVPJg _k0hsle39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0hsle39Ee6g0P-x8MVPJg" name="extensionEnd" type="_k0bl8O39Ee6g0P-x8MVPJg" subsettedProperty="_k0VfUe39Ee6g0P-x8MVPJg" association="_k0hslO39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0hslu39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0hsl-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_k0hsmO39Ee6g0P-x8MVPJg" name="A_ownedEnd_extension" memberEnd="_k0WGve39Ee6g0P-x8MVPJg _k0hsme39Ee6g0P-x8MVPJg">
      <ownedEnd xmi:id="_k0hsme39Ee6g0P-x8MVPJg" name="extension" type="_k0WGsO39Ee6g0P-x8MVPJg" association="_k0hsmO39Ee6g0P-x8MVPJg">
        <subsettedProperty href="uml-2.5.1/UML.uml#Property-owningAssociation"/>
      </ownedEnd>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="Element" name="Element">
      <ownedComment xmi:id="_k0KgP-39Ee6g0P-x8MVPJg" annotatedElement="Element">
        <body>An Element is a constituent of a model. As such, it has the capability of owning other Elements.</body>
      </ownedComment>
      <ownedRule xmi:id="_k0KgQO39Ee6g0P-x8MVPJg" name="has_owner" constrainedElement="Element">
        <ownedComment xmi:id="_k0KgQe39Ee6g0P-x8MVPJg" annotatedElement="_k0KgQO39Ee6g0P-x8MVPJg">
          <body>Elements that must be owned must have an owner.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0KgQu39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>mustBeOwned() implies owner->notEmpty()</body>
        </specification>
      </ownedRule>
      <ownedRule xmi:id="_k0KgQ-39Ee6g0P-x8MVPJg" name="not_own_self" constrainedElement="Element">
        <ownedComment xmi:id="_k0KgRO39Ee6g0P-x8MVPJg" annotatedElement="_k0KgQ-39Ee6g0P-x8MVPJg">
          <body>An element may not directly or indirectly own itself.</body>
        </ownedComment>
        <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0KgRe39Ee6g0P-x8MVPJg">
          <language>OCL</language>
          <body>not allOwnedElements()->includes(self)</body>
        </specification>
      </ownedRule>
      <ownedAttribute xmi:id="_kxrM4O39Ee6g0P-x8MVPJg" name="model" subsettedProperty="Element-owner" association="_kx3aIO39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_kxrM4e39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_kxrM4u39Ee6g0P-x8MVPJg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_kxxTgO39Ee6g0P-x8MVPJg" name="uuid">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EString"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_kx-H1u39Ee6g0P-x8MVPJg" name="tag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EString"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_kx-H1-39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_kx-H2O39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_kx-H2e39Ee6g0P-x8MVPJg" name="customProperty" type="_kx9gxu39Ee6g0P-x8MVPJg" aggregation="composite" association="_kx3aIO39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_kx-H2u39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_kx-H2-39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0G15O39Ee6g0P-x8MVPJg" name="superseedingRelationship" type="_k0G12u39Ee6g0P-x8MVPJg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0G15e39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0G15u39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0KgRu39Ee6g0P-x8MVPJg" name="ownedComment" type="Comment" aggregation="composite" subsettedProperty="_k0KgSu39Ee6g0P-x8MVPJg" association="_k0WGkO39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0KgR-39Ee6g0P-x8MVPJg" annotatedElement="_k0KgRu39Ee6g0P-x8MVPJg">
          <body>The Comments owned by this Element.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0KgSO39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0KgSe39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_k0KgSu39Ee6g0P-x8MVPJg" name="ownedElement" type="Element" isReadOnly="true" aggregation="composite" isDerived="true" isDerivedUnion="true" association="_k0WGj-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0KgS-39Ee6g0P-x8MVPJg" annotatedElement="_k0KgSu39Ee6g0P-x8MVPJg">
          <body>The Elements owned by this Element.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0KgTO39Ee6g0P-x8MVPJg"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0KgTe39Ee6g0P-x8MVPJg" value="*"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="Element-owner" name="owner" type="Element" isReadOnly="true" isDerived="true" isDerivedUnion="true" association="_k0WGj-39Ee6g0P-x8MVPJg">
        <ownedComment xmi:id="_k0KgTu39Ee6g0P-x8MVPJg" annotatedElement="Element-owner">
          <body>The Element that owns this Element.</body>
        </ownedComment>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="Element-owner-_lowerValue"/>
      </ownedAttribute>
      <ownedOperation xmi:id="_kxzvwO39Ee6g0P-x8MVPJg" name="model" bodyCondition="_kxzvwe39Ee6g0P-x8MVPJg">
        <ownedRule xmi:id="_kxzvwe39Ee6g0P-x8MVPJg" name="spec">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_kxzvwu39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>if (owner = null) then&#xD;
  null&#xD;
else if (owner.oclIsKindOf(Model)) then&#xD;
  owner.oclAsType(Model)&#xD;
else&#xD;
  owner.model()&#xD;
endif&#xD;
endif</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_kxzvw-39Ee6g0P-x8MVPJg" name="result" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_kxzvxO39Ee6g0P-x8MVPJg"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0KgT-39Ee6g0P-x8MVPJg" name="allOwnedElements" bodyCondition="_k0KgUe39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0KgUO39Ee6g0P-x8MVPJg" annotatedElement="_k0KgT-39Ee6g0P-x8MVPJg">
          <body>The query allOwnedElements() gives all of the direct and indirect ownedElements of an Element.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0KgUe39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0KgT-39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0KgUu39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))->asSet())</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0KgU-39Ee6g0P-x8MVPJg" name="result" type="Element" direction="return">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_k0KgVO39Ee6g0P-x8MVPJg"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_k0KgVe39Ee6g0P-x8MVPJg" value="*"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0KgVu39Ee6g0P-x8MVPJg" name="mustBeOwned" bodyCondition="_k0KgWO39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedComment xmi:id="_k0KgV-39Ee6g0P-x8MVPJg" annotatedElement="_k0KgVu39Ee6g0P-x8MVPJg">
          <body>The query mustBeOwned() indicates whether Elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.</body>
        </ownedComment>
        <ownedRule xmi:id="_k0KgWO39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0KgVu39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0KgWe39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>result = (true)</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0KgWu39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_k0hsmu39Ee6g0P-x8MVPJg" name="oid" bodyCondition="_k0hsm-39Ee6g0P-x8MVPJg" isQuery="true">
        <ownedRule xmi:id="_k0hsm-39Ee6g0P-x8MVPJg" name="spec" constrainedElement="_k0hsmu39Ee6g0P-x8MVPJg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_k0hsnO39Ee6g0P-x8MVPJg">
            <language>OCL</language>
            <body>uuid</body>
          </specification>
        </ownedRule>
        <ownedParameter xmi:id="_k0hsne39Ee6g0P-x8MVPJg" name="result" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EString"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <profileApplication xmi:id="_qckesO3zEe6p4qQ9OedHIg">
      <eAnnotations xmi:id="_qclFwO3zEe6p4qQ9OedHIg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Ecore.profile.uml#_z1OFcHjqEdy8S4Cr8Rc_NA"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Ecore.profile.uml#_0"/>
    </profileApplication>
  </uml:Model>
  <Ecore:EAttribute xmi:id="_uZjRoO3zEe6p4qQ9OedHIg" isUnsettable="true" isID="true"/>
  <Ecore:EAttribute xmi:id="_kx3aJu39Ee6g0P-x8MVPJg" isUnsettable="true" base_Property="_kxxTgO39Ee6g0P-x8MVPJg" isID="true"/>
</xmi:XMI>
