[comment encoding = UTF-8 /]
[module Association('http://www.eclipse.org/uml2/5.0.0/UML')/]

[import engineering::schumann::uml::m2t::MultiplicityElement /]

[query public _associationType(assoc : Association) : String =
	if assoc._isComposition() then 'composition' else 'association' endif
/]


[query public _from(assoc : Association) : Property =
	assoc.memberEnd->at(1)
/]


[query public _hasFrom(assoc : Association) : Boolean =
	assoc.memberEnd->size() > 0 and assoc._from().owner <> assoc
/]


[query public _hasOwnedMembers(assoc : Association ) : Boolean =
	assoc.ownedMember->size() > 0
/]


[query public _hasTo(assoc : Association) : Boolean =
	assoc.memberEnd->size() > 1 and assoc._to().owner <> assoc
/]


[query public _isAtLeast1toN(assoc : Association) : Boolean =
	assoc.memberEnd->select( _isArray() )->size() > 0
/]


[query public _isComposition(assoc : Association) : Boolean =
	assoc.memberEnd->select( aggregation = 'composite' )->size() > 0
/]


[query public _isFullyNavigable(assoc : Association ) : Boolean =
	assoc.memberEnd->forAll( isNavigable() )
/]
[comment not assoc._hasOwnedMembers() and assoc.memberEnd->size() > 1 /]


[query public _isReversed(assoc : Association) : Boolean =
	assoc._isComposition() and assoc._to().aggregation <> 'composite'
/]


[query public _strMultiplicityFrom(assoc : Association) : String =
	assoc._from().strCardinality()
/]



[query public _strMultiplicityTo(assoc : Association) : String =
	assoc._to().strCardinality()
/]


[query public _to(assoc : Association) : Property =
	assoc.memberEnd->at(2)
/]


[query public _type(assoc : Association) : String=
	assoc._associationType() + assoc._unidirect()
/]


[query public _unidirect(assoc : Association) : String =
	if assoc.memberEnd->select( isNavigable() )->size() = 1 then 'Uni' else '' endif
/]
